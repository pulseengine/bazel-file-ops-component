/// Universal File Operations Component for Bazel Build Systems
///
/// This component provides cross-platform file operations that replace
/// platform-specific shell scripts in build systems like Bazel.
/// Designed to unify file handling across Go, C++, JavaScript, Rust, and other toolchains
/// with enhanced security through WebAssembly sandboxing.

package bazel:file-ops@1.0.0;

/// Shared types interface for cross-interface type usage
interface types {
    /// Path information returned by path-exists function
    record path-info {
        /// Whether the path exists
        exists: bool,
        /// Type of path (file, directory, symlink, etc.)
        path-type: path-type-enum,
        /// File size in bytes (if applicable)
        size: option<u64>,
    }

    /// Enumeration of path types
    enum path-type-enum {
        file,
        directory,
        symlink,
        other,
    }

    /// Information about prepared workspace
    record workspace-info {
        /// List of files that were prepared
        prepared-files: list<string>,

        /// Final workspace path
        workspace-path: string,

        /// Success message
        message: string,

        /// Time taken for preparation (milliseconds)
        preparation-time-ms: u64,

        /// Security context used
        security-context: option<security-context>,
    }

    /// Security context information
    record security-context {
        /// Active security policy
        policy: string,
        /// Preopen directories currently configured
        preopen-dirs: list<string>,
        /// Security level (low, medium, high)
        security-level: string,
    }

    /// Types of workspace configurations supported
    enum workspace-type {
        /// JavaScript/Node.js workspace
        javascript,
        /// Go/TinyGo workspace
        golang,
        /// C/C++ workspace
        cpp,
        /// Rust workspace
        rust,
        /// Generic workspace
        generic,
    }

    /// Security configuration for sandbox operations
    record security-config {
        /// Allowed directories for file operations
        allowed-dirs: list<string>,
        /// Whether to enable strict path validation
        strict-validation: bool,
        /// Maximum file size for operations
        max-file-size: option<u64>,
    }

    /// Preopen directory configuration for WASI
    record preopen-dir-config {
        /// Host path to map
        host-path: string,
        /// Guest path in WASI environment
        guest-path: string,
        /// Whether directory is read-only
        read-only: bool,
    }

    /// File specification with source and optional destination
    record file-spec {
        /// Source file path
        source: string,

        /// Optional destination path (defaults to basename)
        destination: option<string>,

        /// Whether to preserve file permissions
        preserve-permissions: bool,

        /// Whether to preserve directory structure
        preserve-structure: bool,
    }

    /// Package.json configuration for JavaScript projects
    record package-config {
        /// Package name
        name: string,
        /// Package version
        version: string,
        /// Dependencies to include
        dependencies: list<string>,
        /// Dev dependencies to include
        dev-dependencies: list<string>,
        /// Build scripts
        scripts: list<script-entry>,
    }

    /// Script entry for package.json
    record script-entry {
        /// Script name
        name: string,
        /// Script command
        command: string,
    }

    /// Go module configuration for Go projects
    record go-module-config {
        /// Module name
        module-name: string,
        /// Go version requirement
        go-version: string,
        /// Dependencies to include
        dependencies: list<go-dependency>,
    }

    /// Go dependency specification
    record go-dependency {
        /// Module path
        module: string,
        /// Version constraint
        version: string,
    }

    /// C/C++ workspace configuration
    record cpp-workspace-config {
        /// Project name
        project-name: string,
        /// Include directories
        include-dirs: list<string>,
        /// Library directories
        lib-dirs: list<string>,
        /// Compiler flags
        cflags: list<string>,
        /// Linker flags
        ldflags: list<string>,
    }
}

/// Core file operations interface
interface file-operations {
    use types.{path-info};

    /// Copy a single file from source to destination
    /// Returns success or error message
    copy-file: func(src: string, dest: string) -> result<_, string>;

    /// Copy a directory recursively from source to destination
    /// Preserves file permissions and timestamps
    copy-directory: func(src: string, dest: string) -> result<_, string>;

    /// Create a directory and all parent directories if they don't exist
    /// Equivalent to `mkdir -p` but cross-platform
    create-directory: func(path: string) -> result<_, string>;

    /// Remove a file or directory (recursively if directory)
    /// Safe operation that handles missing files gracefully
    remove-path: func(path: string) -> result<_, string>;

    /// Check if a path exists and return its type
    path-exists: func(path: string) -> path-info;

    /// Get absolute path resolution
    /// Resolves relative paths to absolute paths cross-platform
    resolve-absolute-path: func(path: string) -> result<string, string>;

    /// Join multiple path segments into a single path
    /// Uses appropriate path separators for the platform
    join-paths: func(paths: list<string>) -> string;

    /// Get the directory name from a file path
    get-dirname: func(path: string) -> string;

    /// Get the filename from a file path
    get-basename: func(path: string) -> string;

    /// List files in a directory with optional pattern matching
    list-directory: func(dir: string, pattern: option<string>) -> result<list<string>, string>;

    /// Validate path for security (check for path traversal attempts)
    validate-path: func(path: string, allowed-dirs: list<string>) -> result<_, string>;
}

/// JSON batch processing interface for backward compatibility
interface json-batch-operations {
    use types.{workspace-info};

    /// Process JSON configuration for batch file operations
    /// This maintains compatibility with existing Go-based tools
    process-json-config: func(config-json: string) -> result<workspace-info, string>;

    /// Validate JSON configuration before processing
    validate-json-config: func(config-json: string) -> result<_, string>;

    /// Get JSON schema for configuration validation
    get-json-schema: func() -> string;
}

/// Workspace management interface for build systems
interface workspace-management {
    use types.{workspace-info, workspace-type, security-config, file-spec, package-config, go-module-config, cpp-workspace-config};

    /// Configuration for workspace preparation
    record workspace-config {
        /// Target workspace directory
        work-dir: string,

        /// Source files to include
        sources: list<file-spec>,

        /// Header files to include (C/C++)
        headers: list<file-spec>,

        /// Generated bindings directory
        bindings-dir: option<string>,

        /// Dependencies to include
        dependencies: list<file-spec>,

        /// Workspace type for language-specific setup
        workspace-type: workspace-type,

        /// Security configuration
        security-config: option<security-config>,
    }

    /// Prepare a complete workspace from configuration
    /// This is the main entry point for build system integration
    prepare-workspace: func(config: workspace-config) -> result<workspace-info, string>;

    /// Copy source files to workspace with proper organization
    copy-sources: func(sources: list<file-spec>, dest-dir: string) -> result<_, string>;

    /// Copy header files to workspace with directory structure preservation
    copy-headers: func(headers: list<file-spec>, dest-dir: string) -> result<_, string>;

    /// Copy generated bindings to workspace
    copy-bindings: func(bindings-dir: string, dest-dir: string) -> result<_, string>;

    /// Set up package.json for JavaScript/Node.js builds
    setup-package-json: func(config: package-config, work-dir: string) -> result<_, string>;

    /// Organize Go module structure for TinyGo builds
    setup-go-module: func(config: go-module-config, work-dir: string) -> result<_, string>;

    /// Organize C/C++ source structure for compilation
    setup-cpp-workspace: func(config: cpp-workspace-config, work-dir: string) -> result<_, string>;
}

/// Security and sandboxing interface
interface security-operations {
    use types.{security-context, preopen-dir-config};

    /// Set preopen directories for WASI sandboxing
    configure-preopen-dirs: func(dirs: list<preopen-dir-config>) -> result<_, string>;

    /// Validate operation against security policy
    validate-operation: func(operation: string, paths: list<string>) -> result<_, string>;

    /// Get current security context information
    get-security-context: func() -> security-context;
}


/// World definition for the file operations component
world file-ops-world {
    export file-operations;
    export json-batch-operations;
    export workspace-management;
    export security-operations;
}
