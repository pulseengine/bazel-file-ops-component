"""Bazel File Operations Component

Universal file operations for Bazel build systems via WebAssembly components.

This module provides both TinyGo and Rust implementations of file operations
that can be used across different Bazel rule sets with enhanced security
through WebAssembly sandboxing.
"""

module(
    name = "bazel-file-ops-component",
    version = "0.1.0",
    compatibility_level = 1,
)

# Core Bazel dependencies - reverted to match rules_wasm_component expectations
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Enable C++ toolchain auto-configuration for cross-platform support
cc_configure = use_extension("@rules_cc//cc:extensions.bzl", "cc_configure")

# WebAssembly and component support
bazel_dep(name = "rules_rust", version = "0.62.0")
bazel_dep(name = "rules_go", version = "0.55.1")

# Development dependencies
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0", dev_dependency = True)

# Documentation site dependencies - simplified setup
bazel_dep(name = "rules_nodejs", version = "6.5.0")

# TinyGo toolchain for WebAssembly components
bazel_dep(name = "rules_wasm_component", version = "0.1.0")

# Git repository override - use main branch with merged fixes
git_override(
    module_name = "rules_wasm_component",
    commit = "e6a3455",  # Latest main branch with go_wasm_component + C++ toolchain fixes
    remote = "https://github.com/pulseengine/rules_wasm_component.git",
)

# Git repository override for rules_rust - WASI Preview 2 support required
git_override(
    module_name = "rules_rust",
    commit = "7d7d3ac00ad013c94e7a9d0db0732c20ffe8eab7",  # WASI Preview 2 support
    remote = "https://github.com/bazelbuild/rules_rust.git",
)

# Local development override - use local rules_wasm_component (disabled for CI)
# local_path_override(
#     module_name = "rules_wasm_component",
#     path = "/Users/r/git/rules_wasm_component",
# )

# Rust toolchain setup
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# Note: C++ toolchains are provided by rules_cc and WASI SDK
# Using WASI SDK toolchains for WebAssembly C++ compilation

# WASI SDK toolchain for WebAssembly C++ components
wasi_sdk = use_extension("@rules_wasm_component//wasm:extensions.bzl", "wasi_sdk")
wasi_sdk.register(
    name = "wasi",
    strategy = "download",
    version = "27",
)
use_repo(wasi_sdk, "wasi_sdk")

# Register WASI SDK toolchains
register_toolchains(
    "@wasi_sdk//:wasi_sdk_toolchain",
    "@wasi_sdk//:cc_toolchain",
)

# Register C++ toolchains explicitly for cross-platform compatibility
# This ensures Linux CI has proper C++ toolchain resolution for Rust binaries
register_toolchains("@bazel_tools//tools/cpp:all")

# Note: Rust dependencies are provided by rules_wasm_component
# No local Rust crate dependencies needed for TinyGo-focused implementation

# Go toolchain setup
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.0")

# TinyGo toolchain setup - using rules_wasm_component native setup
# Note: TinyGo toolchain is registered automatically by rules_wasm_component

# Node.js setup for documentation
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.18.0")
use_repo(node, "nodejs_toolchains")

# Register Node.js toolchains
register_toolchains("@nodejs_toolchains//:all")
