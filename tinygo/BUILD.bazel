"""TinyGo WebAssembly File Operations Component

This package provides the TinyGo implementation of the file operations component
with WIT interface bindings for secure, sandboxed file operations.
"""

load("@rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@rules_wasm_component//go:defs.bzl", "go_wasm_component_library")

package(default_visibility = ["//visibility:public"])

# TinyGo library with core file operations
go_library(
    name = "file_ops_lib",
    srcs = [
        "json_bridge.go",
        "operations.go", 
        "security.go",
        "workspace.go",
    ],
    importpath = "github.com/pulseengine/bazel-file-ops-component/tinygo",
    deps = [
        # Standard library dependencies only for TinyGo compatibility
    ],
)

# CLI binary for testing and development
go_binary(
    name = "file_ops_cli",
    srcs = ["main.go"],
    deps = [":file_ops_lib"],
    # Build for host platform for testing
    goos = "linux",
    goarch = "amd64",
)

# TinyGo WebAssembly Component
go_wasm_component_library(
    name = "file_ops_component",
    srcs = [
        "main.go",
        "json_bridge.go", 
        "operations.go",
        "security.go",
        "workspace.go",
        "wit_bindings.go",
    ],
    wit_file = "//wit:file-operations.wit",
    deps = [":file_ops_lib"],
    # TinyGo specific configuration
    compiler = "tinygo",
    target = "wasm32-wasi", 
    optimization = "2",
    tags = ["manual"],  # Build explicitly for WASM
)

# Test suite
go_test(
    name = "file_ops_test",
    srcs = [
        "operations_test.go",
        "json_bridge_test.go",
        "security_test.go",
        "workspace_test.go",
    ],
    deps = [
        ":file_ops_lib",
        "@org_golang_x_testing//fstest",
    ],
    data = [
        "//testdata:test_configs",
        "//testdata:test_files",
    ],
)

# Integration tests with WASM component
sh_test(
    name = "integration_test", 
    srcs = ["integration_test.sh"],
    data = [
        ":file_ops_component",
        "//testdata:integration_configs",
    ],
    tags = ["integration"],
)

# Performance benchmarks
go_test(
    name = "benchmark_test",
    srcs = ["benchmark_test.go"], 
    deps = [":file_ops_lib"],
    args = ["-bench=."],
    tags = ["benchmark"],
)

# Export for toolchain use
alias(
    name = "file_ops",
    actual = ":file_ops_component",
    visibility = ["//visibility:public"],
)