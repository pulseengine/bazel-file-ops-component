[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.13.3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://bazel-file-ops.pulseengine.eu\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[[null,{\"logger\":{\"options\":{\"dest\":{},\"level\":\"info\"},\"label\":\"astro-mermaid\"}}],null,null,null],\"rehypePlugins\":[[null,{\"logger\":{\"options\":{\"dest\":{},\"level\":\"info\"},\"label\":\"astro-mermaid\"}}],null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[\"github-dark\",\"github-light\"],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}],\"shiki\":{\"langAlias\":{\"starlark\":\"python\",\"star\":\"python\",\"bzl\":\"python\",\"bazel\":\"python\"},\"langs\":[]}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",9,10,34,35,43,44,52,53,61,62,70,71,79,80,88,89],"index",{"id":9,"data":11,"body":29,"filePath":30,"digest":31,"legacyId":32,"deferredRender":33},{"title":12,"description":13,"template":14,"hero":15},"Bazel File Operations Component","Universal file operations for Bazel build systems via WebAssembly components","splash",{"tagline":16,"image":17,"actions":19},"Universal file operations for Bazel build systems via WebAssembly components with enhanced security and cross-platform support",{"file":18},"../../assets/file-ops-hero.svg",[20,25],{"text":21,"link":22,"icon":23,"variant":24},"Quick Start","/getting-started/","right-arrow","primary",{"text":26,"link":27,"icon":28},"View on GitHub","https://github.com/pulseengine/bazel-file-ops-component","external","import { Card, CardGrid } from '@astrojs/starlight/components';\n\n## Why File Operations Component?\n\nTraditional Bazel rule sets rely on shell scripts and platform-specific commands for file operations, leading to inconsistencies across Windows, macOS, and Linux. This component provides a secure, unified solution through WebAssembly.\n\n\u003CCardGrid stagger>\n  \u003CCard title=\"🔒 Enhanced Security\" icon=\"shield\">\n    WebAssembly sandboxing with wasmtime preopen directories prevents unauthorized file access and path traversal attacks.\n  \u003C/Card>\n\n  \u003CCard title=\"🌍 Cross-Platform\" icon=\"laptop\">\n    Works identically on Linux, macOS, and Windows without platform-specific code or dependencies.\n  \u003C/Card>\n\n  \u003CCard title=\"⚡ Dual Implementation\" icon=\"rocket\">\n    Choose between TinyGo (security-focused) and Rust (performance-optimized) based on your needs.\n  \u003C/Card>\n\n  \u003CCard title=\"🔄 Backward Compatible\" icon=\"puzzle\">\n    Supports existing JSON batch processing workflows while offering modern individual operation APIs.\n  \u003C/Card>\n\u003C/CardGrid>\n\n## Architecture Overview\n\n```mermaid\nflowchart TB\n    subgraph \"Bazel Rule Sets\"\n        A[rules_wasm_component]\n        B[rules_rust]\n        C[rules_go]\n        D[rules_cc]\n    end\n\n    subgraph \"File Ops Component\"\n        E[Component Selection]\n        F[TinyGo Component]\n        G[Rust Component]\n        H[WIT Interface]\n    end\n\n    subgraph \"Security Layer\"\n        I[WASM Sandbox]\n        J[Preopen Directories]\n        K[Path Validation]\n    end\n\n    A --> E\n    B --> E\n    C --> E\n    D --> E\n\n    E --> F\n    E --> G\n    F --> H\n    G --> H\n\n    H --> I\n    I --> J\n    J --> K\n```\n\n## Key Features\n\n### Secure by Design\n- **WebAssembly Sandboxing**: Components run in isolated environments\n- **Preopen Directories**: Only specified directories are accessible\n- **Capability-Based Security**: No access outside designated paths\n- **Runtime Validation**: Path traversal protection at WASM level\n\n### Performance Optimized\n- **Smart Implementation Selection**: Automatic choice between TinyGo and Rust\n- **Minimal Overhead**: Optimized WASM runtime with fast startup\n- **Efficient File Operations**: Streaming I/O for large files\n- **Caching**: Component reuse across operations\n\n### Developer Friendly\n- **JSON Compatibility**: Works with existing batch processing workflows\n- **Individual Operations**: Direct API calls for specific operations\n- **Rich Documentation**: Comprehensive guides and examples\n- **Easy Integration**: Simple integration with any Bazel rule set\n\n## Quick Example\n\n### JSON Batch Processing (Backward Compatible)\n```json\n{\n  \"workspace_dir\": \"/build/workspace\",\n  \"operations\": [\n    {\"type\": \"copy_file\", \"src_path\": \"/src/main.cpp\", \"dest_path\": \"main.cpp\"},\n    {\"type\": \"mkdir\", \"path\": \"include\"},\n    {\"type\": \"copy_directory\", \"src_path\": \"/headers\", \"dest_path\": \"include\"}\n  ]\n}\n```\n\n### Individual Operations (New API)\n```starlark\nload(\"@bazel_file_ops_component//toolchain:defs.bzl\", \"file_ops_action\")\n\nfile_ops_action(\n    name = \"setup_workspace\",\n    implementation = \"tinygo\",  # High security\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"source.cpp\", \"dest\": \"workspace/source.cpp\"},\n        {\"operation\": \"create_directory\", \"path\": \"workspace/include\"},\n    ],\n    security_level = \"high\",\n)\n```\n\n## Getting Started\n\n1. **[Installation](/installation/)** - Add to your Bazel workspace\n2. **[First Operations](/first-operations/)** - Run your first file operations\n3. **[Integration Guide](/integration/rules-wasm-component/)** - Integrate with your rule set\n4. **[Security Configuration](/security/levels/)** - Configure security settings\n\n## Community & Support\n\n- **GitHub Repository**: [pulseengine/bazel-file-ops-component](https://github.com/pulseengine/bazel-file-ops-component)\n- **Issues & Bug Reports**: [GitHub Issues](https://github.com/pulseengine/bazel-file-ops-component/issues)\n- **Discussions**: [GitHub Discussions](https://github.com/pulseengine/bazel-file-ops-component/discussions)\n- **Contributing**: [Contribution Guidelines](https://github.com/pulseengine/bazel-file-ops-component/blob/main/CONTRIBUTING.md)\n\nBuilt with ❤️ for the Bazel community by [Pulse Engine](https://pulseengine.eu).","src/content/docs/index.mdx","fa87f66ff943b1d2","index.mdx",true,"examples",{"id":34,"data":36,"body":39,"filePath":40,"digest":41,"legacyId":42,"deferredRender":33},{"title":37,"description":38},"Examples","Real-world examples and use cases for Bazel File Operations Component","import { Code, Tabs, TabItem, Card, CardGrid, FileTree } from '@astrojs/starlight/components';\n\n## Complete Examples\n\nThis page showcases real-world usage patterns and complete examples for integrating the Bazel File Operations Component into your build systems.\n\n## Basic File Operations\n\n### Simple File Copy\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\nfile_ops_action(\n    name = \"copy_config\",\n    srcs = [\"config.json\"],\n    outs = [\"workspace/config.json\"],\n    operations = [\n        {\n            \"operation\": \"copy_file\",\n            \"src\": \"config.json\",\n            \"dest\": \"workspace/config.json\",\n            \"preserve_metadata\": True,\n        },\n    ],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"config.json\">\n```json\n{\n  \"app_name\": \"MyApplication\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"production\"\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Directory Structure Setup\n\n```python\nfile_ops_action(\n    name = \"setup_project_structure\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"workspace/src\"},\n        {\"operation\": \"create_directory\", \"path\": \"workspace/include\"},\n        {\"operation\": \"create_directory\", \"path\": \"workspace/test\"},\n        {\"operation\": \"create_directory\", \"path\": \"workspace/build\"},\n        {\"operation\": \"create_directory\", \"path\": \"workspace/docs\"},\n    ],\n)\n```\n\n## C++ Project Examples\n\n### C++ Library Workspace\n\n\u003CFileTree>\n- cpp_project/\n  - BUILD.bazel\n  - src/\n    - library.cpp\n    - library.h\n  - test/\n    - test_library.cpp\n  - CMakeLists.txt\n\u003C/FileTree>\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@rules_cc//cc:defs.bzl\", \"cc_library\", \"cc_test\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Prepare C++ workspace\nfile_ops_action(\n    name = \"prepare_cpp_workspace\",\n    srcs = glob([\"src/**/*.cpp\", \"src/**/*.h\", \"test/**/*.cpp\"]),\n    operations = [\n        # Create directory structure\n        {\"operation\": \"create_directory\", \"path\": \"cpp_build/src\"},\n        {\"operation\": \"create_directory\", \"path\": \"cpp_build/include\"},\n        {\"operation\": \"create_directory\", \"path\": \"cpp_build/test\"},\n\n        # Copy source files\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"src/\",\n            \"dest\": \"cpp_build/include/\",\n            \"include_patterns\": [\"*.h\"],\n        },\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"src/\",\n            \"dest\": \"cpp_build/src/\",\n            \"include_patterns\": [\"*.cpp\"],\n        },\n\n        # Copy test files\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"test/\",\n            \"dest\": \"cpp_build/test/\",\n            \"include_patterns\": [\"*.cpp\"],\n        },\n    ],\n)\n\ncc_library(\n    name = \"my_library\",\n    srcs = [\":prepare_cpp_workspace\"],\n    hdrs = [\":prepare_cpp_workspace\"],\n    includes = [\"cpp_build/include\"],\n)\n\ncc_test(\n    name = \"library_test\",\n    srcs = [\":prepare_cpp_workspace\"],\n    deps = [\":my_library\"],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"src/library.h\">\n```cpp\n#ifndef LIBRARY_H\n#define LIBRARY_H\n\nclass Library {\npublic:\n    static int add(int a, int b);\n    static int multiply(int a, int b);\n};\n\n#endif // LIBRARY_H\n```\n\u003C/TabItem>\n\u003CTabItem label=\"src/library.cpp\">\n```cpp\n#include \"library.h\"\n\nint Library::add(int a, int b) {\n    return a + b;\n}\n\nint Library::multiply(int a, int b) {\n    return a * b;\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Cross-Platform C++ Build\n\n```python\nfile_ops_action(\n    name = \"setup_cross_platform_cpp\",\n    operations = [\n        # Base structure\n        {\"operation\": \"create_directory\", \"path\": \"cross_build/common\"},\n        {\"operation\": \"create_directory\", \"path\": \"cross_build/platform\"},\n\n        # Copy common files\n        {\"operation\": \"copy_directory\", \"src\": \"src/common/\", \"dest\": \"cross_build/common/\"},\n\n        # Platform-specific files (conditional based on target platform)\n        {\"operation\": \"copy_file\", \"src\": \"src/platform/unix.cpp\", \"dest\": \"cross_build/platform/platform.cpp\"},\n        {\"operation\": \"copy_file\", \"src\": \"src/platform/unix.h\", \"dest\": \"cross_build/platform/platform.h\"},\n    ] + select({\n        \"@platforms//os:windows\": [\n            {\"operation\": \"copy_file\", \"src\": \"src/platform/windows.cpp\", \"dest\": \"cross_build/platform/platform.cpp\"},\n            {\"operation\": \"copy_file\", \"src\": \"src/platform/windows.h\", \"dest\": \"cross_build/platform/platform.h\"},\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n```\n\n## Rust Project Examples\n\n### Cargo Workspace Setup\n\n\u003CFileTree>\n- rust_project/\n  - BUILD.bazel\n  - Cargo.toml\n  - src/\n    - main.rs\n    - lib.rs\n  - tests/\n    - integration_test.rs\n\u003C/FileTree>\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@rules_rust//rust:defs.bzl\", \"rust_binary\", \"rust_library\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Prepare Rust workspace with proper structure\nfile_ops_action(\n    name = \"prepare_rust_workspace\",\n    srcs = [\n        \"Cargo.toml\",\n        \"src/main.rs\",\n        \"src/lib.rs\",\n        \"tests/integration_test.rs\",\n    ],\n    operations = [\n        # Create Cargo workspace structure\n        {\"operation\": \"create_directory\", \"path\": \"rust_build/src\"},\n        {\"operation\": \"create_directory\", \"path\": \"rust_build/tests\"},\n        {\"operation\": \"create_directory\", \"path\": \"rust_build/target\"},\n\n        # Copy Cargo configuration\n        {\"operation\": \"copy_file\", \"src\": \"Cargo.toml\", \"dest\": \"rust_build/Cargo.toml\"},\n\n        # Copy source files\n        {\"operation\": \"copy_directory\", \"src\": \"src/\", \"dest\": \"rust_build/src/\"},\n\n        # Copy test files\n        {\"operation\": \"copy_directory\", \"src\": \"tests/\", \"dest\": \"rust_build/tests/\"},\n    ],\n    implementation = \"rust\",  # Use Rust implementation for Rust projects\n    security_level = \"standard\",\n)\n\nrust_binary(\n    name = \"rust_app\",\n    srcs = [\":prepare_rust_workspace\"],\n    crate_root = \"rust_build/src/main.rs\",\n    edition = \"2021\",\n)\n\nrust_library(\n    name = \"rust_lib\",\n    srcs = [\":prepare_rust_workspace\"],\n    crate_root = \"rust_build/src/lib.rs\",\n    edition = \"2021\",\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Cargo.toml\">\n```toml\n[package]\nname = \"my_rust_project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\ntokio = { version = \"1.0\", features = [\"full\"] }\n\n[dev-dependencies]\ncriterion = \"0.5\"\n```\n\u003C/TabItem>\n\u003CTabItem label=\"src/main.rs\">\n```rust\nuse my_rust_project::greet;\n\nfn main() {\n    println!(\"{}\", greet(\"World\"));\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Go Project Examples\n\n### Go Module Workspace\n\n\u003CFileTree>\n- go_project/\n  - BUILD.bazel\n  - go.mod\n  - go.sum\n  - cmd/\n    - server/\n      - main.go\n  - pkg/\n    - handler/\n      - handler.go\n\u003C/FileTree>\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@rules_go//go:def.bzl\", \"go_binary\", \"go_library\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Prepare Go workspace\nfile_ops_action(\n    name = \"prepare_go_workspace\",\n    srcs = [\n        \"go.mod\",\n        \"go.sum\",\n    ] + glob([\n        \"cmd/**/*.go\",\n        \"pkg/**/*.go\",\n    ]),\n    operations = [\n        # Create Go module structure\n        {\"operation\": \"create_directory\", \"path\": \"go_build/cmd/server\"},\n        {\"operation\": \"create_directory\", \"path\": \"go_build/pkg/handler\"},\n\n        # Copy Go module files\n        {\"operation\": \"copy_file\", \"src\": \"go.mod\", \"dest\": \"go_build/go.mod\"},\n        {\"operation\": \"copy_file\", \"src\": \"go.sum\", \"dest\": \"go_build/go.sum\"},\n\n        # Copy application code\n        {\"operation\": \"copy_directory\", \"src\": \"cmd/\", \"dest\": \"go_build/cmd/\"},\n        {\"operation\": \"copy_directory\", \"src\": \"pkg/\", \"dest\": \"go_build/pkg/\"},\n    ],\n    implementation = \"tinygo\",  # TinyGo for Go projects\n)\n\ngo_binary(\n    name = \"server\",\n    srcs = [\":prepare_go_workspace\"],\n    importpath = \"github.com/example/go_project/cmd/server\",\n    deps = [\":handler_lib\"],\n)\n\ngo_library(\n    name = \"handler_lib\",\n    srcs = [\":prepare_go_workspace\"],\n    importpath = \"github.com/example/go_project/pkg/handler\",\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"go.mod\">\n```go\nmodule github.com/example/go_project\n\ngo 1.21\n\nrequire (\n    github.com/gorilla/mux v1.8.0\n    github.com/sirupsen/logrus v1.9.3\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"cmd/server/main.go\">\n```go\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"github.com/example/go_project/pkg/handler\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", handler.HomeHandler).Methods(\"GET\")\n\n    log.Println(\"Server starting on :8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## JSON Batch Processing Examples\n\n### Complex Batch Operations\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nfile_ops_action(\n    name = \"complex_batch_operations\",\n    config_file = \"batch_config.json\",\n    implementation = \"rust\",  # Better JSON support\n    security_level = \"standard\",\n    srcs = [\n        \"batch_config.json\",\n        \"templates/app.template\",\n        \"templates/config.template\",\n    ] + glob([\"src/**/*\"]),\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"batch_config.json\">\n```json\n{\n  \"workspace_dir\": \"/build/workspace\",\n  \"security\": {\n    \"level\": \"standard\",\n    \"allowed_paths\": [\n      \"/build/workspace\",\n      \"/templates/*\",\n      \"/src/*\"\n    ]\n  },\n  \"operations\": [\n    {\n      \"type\": \"mkdir\",\n      \"path\": \"app\"\n    },\n    {\n      \"type\": \"mkdir\",\n      \"path\": \"config\"\n    },\n    {\n      \"type\": \"copy_file\",\n      \"src_path\": \"/templates/app.template\",\n      \"dest_path\": \"app/main.cpp\",\n      \"preserve_metadata\": true\n    },\n    {\n      \"type\": \"copy_file\",\n      \"src_path\": \"/templates/config.template\",\n      \"dest_path\": \"config/settings.json\"\n    },\n    {\n      \"type\": \"copy_directory\",\n      \"src_path\": \"/src\",\n      \"dest_path\": \"app/src\",\n      \"recursive\": true,\n      \"include_patterns\": [\"*.cpp\", \"*.h\"],\n      \"exclude_patterns\": [\"*_test.*\", \"*.tmp\"]\n    }\n  ],\n  \"post_processing\": {\n    \"validate_outputs\": true,\n    \"generate_manifest\": true\n  }\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Security-Focused Examples\n\n### High Security File Processing\n\n```python\nfile_ops_action(\n    name = \"secure_document_processing\",\n    implementation = \"tinygo\",  # Maximum security\n    security_level = \"high\",\n    allowed_paths = [\n        \"/tmp/secure-workspace\",\n        \"/encrypted/input\",\n        \"/encrypted/output\",\n    ],\n    operations = [\n        # Create secure workspace\n        {\"operation\": \"create_directory\", \"path\": \"/tmp/secure-workspace\"},\n        {\"operation\": \"create_directory\", \"path\": \"/tmp/secure-workspace/input\"},\n        {\"operation\": \"create_directory\", \"path\": \"/tmp/secure-workspace/output\"},\n\n        # Copy encrypted documents to secure workspace\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"/encrypted/input\",\n            \"dest\": \"/tmp/secure-workspace/input\",\n            \"include_patterns\": [\"*.enc\", \"*.pgp\"],\n            \"preserve_metadata\": True,\n        },\n    ],\n    enable_audit_logging = True,\n    max_file_size_mb = 50,  # Prevent DoS attacks\n)\n```\n\n### Multi-Environment Configuration\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Development environment\nfile_ops_action(\n    name = \"setup_dev_environment\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"environments/dev\"},\n        {\"operation\": \"copy_file\", \"src\": \"configs/dev.json\", \"dest\": \"environments/dev/config.json\"},\n        {\"operation\": \"copy_directory\", \"src\": \"dev-data/\", \"dest\": \"environments/dev/data/\"},\n    ],\n    security_level = \"low\",  # Relaxed for development\n    implementation = \"auto\",\n)\n\n# Production environment\nfile_ops_action(\n    name = \"setup_prod_environment\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"environments/prod\"},\n        {\"operation\": \"copy_file\", \"src\": \"configs/prod.json\", \"dest\": \"environments/prod/config.json\"},\n    ],\n    security_level = \"high\",  # Maximum security for production\n    implementation = \"tinygo\",\n    allowed_paths = [\n        \"/production/workspace\",\n        \"/production/configs\",\n    ],\n    enable_audit_logging = True,\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"configs/dev.json\">\n```json\n{\n  \"environment\": \"development\",\n  \"debug\": true,\n  \"database_url\": \"localhost:5432/dev_db\",\n  \"log_level\": \"debug\"\n}\n```\n\u003C/TabItem>\n\u003CTabItem label=\"configs/prod.json\">\n```json\n{\n  \"environment\": \"production\",\n  \"debug\": false,\n  \"database_url\": \"${DATABASE_URL}\",\n  \"log_level\": \"warn\"\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Performance Examples\n\n### Large File Processing\n\n```python\nfile_ops_action(\n    name = \"process_large_files\",\n    implementation = \"rust\",  # Better performance for large files\n    security_level = \"standard\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"large_data_workspace\"},\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"large_dataset/\",\n            \"dest\": \"large_data_workspace/dataset/\",\n            \"include_patterns\": [\"*.csv\", \"*.json\", \"*.parquet\"],\n            \"exclude_patterns\": [\"*_backup.*\", \"*.tmp\"],\n        },\n    ],\n    # Performance optimizations\n    max_parallel_operations = 8,\n    enable_streaming_io = True,\n    buffer_size_kb = 1024,\n)\n```\n\n### Parallel Processing Pipeline\n\n```python\n# Stage 1: Prepare data\nfile_ops_action(\n    name = \"stage1_prepare\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"pipeline/stage1\"},\n        {\"operation\": \"copy_directory\", \"src\": \"raw_data/\", \"dest\": \"pipeline/stage1/\"},\n    ],\n    implementation = \"rust\",\n)\n\n# Stage 2: Process data (depends on stage 1)\nfile_ops_action(\n    name = \"stage2_process\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"pipeline/stage2\"},\n        {\"operation\": \"copy_directory\", \"src\": \"pipeline/stage1/\", \"dest\": \"pipeline/stage2/\"},\n    ],\n    implementation = \"rust\",\n    deps = [\":stage1_prepare\"],\n)\n\n# Stage 3: Output results (depends on stage 2)\nfile_ops_action(\n    name = \"stage3_output\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"pipeline/output\"},\n        {\"operation\": \"copy_directory\", \"src\": \"pipeline/stage2/\", \"dest\": \"pipeline/output/\"},\n    ],\n    implementation = \"rust\",\n    deps = [\":stage2_process\"],\n)\n```\n\n## Integration Examples\n\n### Custom Rule with File Operations\n\n\u003CTabs>\n\u003CTabItem label=\"custom_rule.bzl\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\ndef _template_processor_impl(ctx):\n    \"\"\"Custom rule that processes templates with file operations\"\"\"\n\n    # Generate operations based on templates\n    operations = []\n\n    # Create output directory structure\n    operations.append({\n        \"operation\": \"create_directory\",\n        \"path\": ctx.attr.output_dir,\n    })\n\n    # Process each template\n    for template in ctx.files.templates:\n        output_file = ctx.attr.output_dir + \"/\" + template.basename.replace(\".template\", \"\")\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": template.path,\n            \"dest\": output_file,\n        })\n\n    # Copy additional resources\n    if ctx.files.resources:\n        operations.append({\n            \"operation\": \"copy_directory\",\n            \"src\": ctx.files.resources[0].dirname,\n            \"dest\": ctx.attr.output_dir + \"/resources\",\n        })\n\n    # Execute file operations\n    file_ops_outputs = file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_file_ops\",\n        operations = operations,\n        implementation = ctx.attr.implementation,\n        security_level = ctx.attr.security_level,\n    )\n\n    return [DefaultInfo(files = depset(file_ops_outputs))]\n\ntemplate_processor = rule(\n    implementation = _template_processor_impl,\n    attrs = {\n        \"templates\": attr.label_list(allow_files = [\".template\"], mandatory = True),\n        \"resources\": attr.label_list(allow_files = True),\n        \"output_dir\": attr.string(mandatory = True),\n        \"implementation\": attr.string(default = \"auto\"),\n        \"security_level\": attr.string(default = \"standard\"),\n    },\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\":custom_rule.bzl\", \"template_processor\")\n\ntemplate_processor(\n    name = \"process_app_templates\",\n    templates = [\n        \"templates/main.cpp.template\",\n        \"templates/config.json.template\",\n        \"templates/README.md.template\",\n    ],\n    resources = glob([\"assets/**/*\"]),\n    output_dir = \"generated_app\",\n    implementation = \"tinygo\",\n    security_level = \"high\",\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Testing Examples\n\n### File Operations Testing\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_test\")\n\n# Test successful operations\nfile_ops_test(\n    name = \"test_file_copy_success\",\n    srcs = [\"test_input.txt\"],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"test_input.txt\", \"dest\": \"test_output.txt\"},\n    ],\n    expected_outputs = [\"test_output.txt\"],\n)\n\n# Test directory creation\nfile_ops_test(\n    name = \"test_directory_creation\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"test_dir\"},\n        {\"operation\": \"create_directory\", \"path\": \"test_dir/subdir\"},\n    ],\n    expected_outputs = [\"test_dir/\", \"test_dir/subdir/\"],\n)\n\n# Test security violations (should fail)\nfile_ops_test(\n    name = \"test_security_violation\",\n    security_level = \"high\",\n    allowed_paths = [\"/tmp/safe\"],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"test.txt\", \"dest\": \"/etc/malicious.txt\"},\n    ],\n    expect_failure = True,\n    expected_error = \"UNAUTHORIZED_PATH\",\n)\n\n# Test complex operations\nfile_ops_test(\n    name = \"test_complex_operations\",\n    srcs = glob([\"test_data/**/*\"]),\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"test_workspace\"},\n        {\n            \"operation\": \"copy_directory\",\n            \"src\": \"test_data/\",\n            \"dest\": \"test_workspace/data/\",\n            \"include_patterns\": [\"*.txt\", \"*.json\"],\n        },\n    ],\n    expected_outputs = [\n        \"test_workspace/\",\n        \"test_workspace/data/file1.txt\",\n        \"test_workspace/data/config.json\",\n    ],\n    implementation = \"rust\",\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"test_input.txt\">\n```\nThis is a test file for the file operations component.\nIt will be copied to test the basic functionality.\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Error Handling Examples\n\n### Robust Error Handling\n\n```python\ndef _robust_file_processor_impl(ctx):\n    \"\"\"Example of robust error handling in custom rules\"\"\"\n\n    operations = []\n\n    # Validate inputs\n    if not ctx.files.srcs:\n        fail(\"No source files provided\")\n\n    # Create operations with error handling\n    try:\n        for src in ctx.files.srcs:\n            # Validate file extension\n            allowed_extensions = [\".cpp\", \".h\", \".txt\", \".json\"]\n            if not any(src.basename.endswith(ext) for ext in allowed_extensions):\n                fail(f\"Unsupported file type: {src.basename}\")\n\n            # Add operation\n            operations.append({\n                \"operation\": \"copy_file\",\n                \"src\": src.path,\n                \"dest\": f\"processed/{src.basename}\",\n                \"preserve_metadata\": True,\n            })\n\n    except Exception as e:\n        fail(f\"Error preparing operations: {e}\")\n\n    # Execute with appropriate error handling\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_robust\",\n        operations = operations,\n        security_level = \"standard\",\n        # Add error handling configuration\n        continue_on_error = False,  # Stop on first error\n        max_retries = 3,            # Retry failed operations\n        timeout_seconds = 300,      # Operation timeout\n    )\n```\n\n## CI/CD Integration Examples\n\n### GitHub Actions Integration\n\n\u003CTabs>\n\u003CTabItem label=\".github/workflows/build.yml\">\n```yaml\nname: Build with File Operations\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Bazel\n        uses: bazelbuild/setup-bazelisk@v2\n\n      - name: Build with File Operations\n        run: |\n          bazel build //... \\\n            --config=ci \\\n            --define FILE_OPS_SECURITY_LEVEL=high \\\n            --define FILE_OPS_IMPLEMENTATION=tinygo\n\n      - name: Test File Operations\n        run: |\n          bazel test //tests:file_ops_tests \\\n            --test_output=all \\\n            --test_env=FILE_OPS_LOG_LEVEL=debug\n```\n\u003C/TabItem>\n\u003CTabItem label=\".bazelrc\">\n```\n# CI configuration\nbuild:ci --disk_cache=/tmp/bazel-cache\nbuild:ci --remote_cache=https://cache.example.com\nbuild:ci --verbose_failures\n\n# Security settings for CI\nbuild:ci --define FILE_OPS_SECURITY_LEVEL=high\nbuild:ci --define FILE_OPS_AUDIT_LOGGING=true\n\n# Performance settings\nbuild:ci --jobs=auto\nbuild:ci --ram_utilization_factor=67\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\nThese examples demonstrate the versatility and power of the Bazel File Operations Component across different languages, security requirements, and integration patterns. Each example includes complete, working code that you can adapt for your specific use cases.\n\n## Next Steps\n\n- **[API Reference](/api-reference/)** - Detailed API documentation for all operations\n- **[Integration Guide](/integration/)** - Learn how to integrate with your rule sets\n- **[Security Configuration](/security/)** - Configure security for your use cases\n- **[Troubleshooting](/troubleshooting/)** - Common issues and solutions","src/content/docs/examples/index.mdx","be62b08bc5a1a5b5","examples/index.mdx","integration",{"id":43,"data":45,"body":48,"filePath":49,"digest":50,"legacyId":51,"deferredRender":33},{"title":46,"description":47},"Integration Guide","How to integrate Bazel File Operations Component with your rule sets","import { Code, Tabs, TabItem, Card, CardGrid } from '@astrojs/starlight/components';\n\n## Overview\n\nThe Bazel File Operations Component is designed to integrate seamlessly with any Bazel rule set, replacing platform-specific shell scripts with secure, cross-platform WebAssembly components.\n\n## Integration Patterns\n\n\u003CCardGrid>\n  \u003CCard title=\"🔄 Drop-in Replacement\" icon=\"swap-horizontal\">\n    Replace existing shell script actions with file operations\n  \u003C/Card>\n  \u003CCard title=\"🎯 Custom Rules\" icon=\"puzzle\">\n    Build custom rules that use file operations internally\n  \u003C/Card>\n  \u003CCard title=\"⚡ Action Composition\" icon=\"lightning\">\n    Compose file operations with other Bazel actions\n  \u003C/Card>\n  \u003CCard title=\"🔧 Toolchain Integration\" icon=\"setting\">\n    Integrate with existing Bazel toolchains\n  \u003C/Card>\n\u003C/CardGrid>\n\n## Rules Integration\n\n### rules_wasm_component\n\nPerfect integration with WebAssembly component rule sets:\n\n\u003CTabs>\n\u003CTabItem label=\"Before (Shell Scripts)\">\n```python\n# Old approach with shell scripts\ngenrule(\n    name = \"prepare_workspace\",\n    srcs = [\"source.cpp\"],\n    outs = [\"workspace/source.cpp\"],\n    cmd = \"\"\"\n        mkdir -p $(dirname $@)\n        cp $\u003C $@\n        chmod 644 $@\n    \"\"\",\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"After (File Operations)\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\nfile_ops_action(\n    name = \"prepare_workspace\",\n    srcs = [\"source.cpp\"],\n    outs = [\"workspace/source.cpp\"],\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"workspace\"},\n        {\"operation\": \"copy_file\", \"src\": \"source.cpp\", \"dest\": \"workspace/source.cpp\"},\n    ],\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### rules_rust\n\nIntegrate with Rust build workflows:\n\n```python\nload(\"@rules_rust//rust:defs.bzl\", \"rust_binary\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Prepare Rust workspace\nfile_ops_action(\n    name = \"prepare_rust_workspace\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"rust_build/src\"},\n        {\"operation\": \"copy_file\", \"src\": \"Cargo.toml\", \"dest\": \"rust_build/Cargo.toml\"},\n        {\"operation\": \"copy_directory\", \"src\": \"src/\", \"dest\": \"rust_build/src/\"},\n    ],\n)\n\nrust_binary(\n    name = \"rust_app\",\n    srcs = [\":prepare_rust_workspace\"],\n    crate_root = \"rust_build/src/main.rs\",\n    deps = [...],\n)\n```\n\n### rules_go\n\nEnhance Go build processes:\n\n```python\nload(\"@rules_go//go:def.bzl\", \"go_binary\", \"go_library\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Setup Go module structure\nfile_ops_action(\n    name = \"setup_go_module\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"go_build/cmd\"},\n        {\"operation\": \"create_directory\", \"path\": \"go_build/pkg\"},\n        {\"operation\": \"copy_file\", \"src\": \"go.mod\", \"dest\": \"go_build/go.mod\"},\n        {\"operation\": \"copy_file\", \"src\": \"go.sum\", \"dest\": \"go_build/go.sum\"},\n        {\"operation\": \"copy_directory\", \"src\": \"cmd/\", \"dest\": \"go_build/cmd/\"},\n    ],\n)\n\ngo_binary(\n    name = \"go_app\",\n    srcs = [\":setup_go_module\"],\n    # ... rest of configuration\n)\n```\n\n### rules_cc\n\nIntegrate with C++ build systems:\n\n```python\nload(\"@rules_cc//cc:defs.bzl\", \"cc_binary\", \"cc_library\")\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Prepare C++ headers and sources\nfile_ops_action(\n    name = \"prepare_cpp_workspace\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"cpp_build/include\"},\n        {\"operation\": \"create_directory\", \"path\": \"cpp_build/src\"},\n        {\"operation\": \"copy_directory\",\n         \"src\": \"include/\",\n         \"dest\": \"cpp_build/include/\",\n         \"include_patterns\": [\"*.h\", \"*.hpp\"]},\n        {\"operation\": \"copy_directory\",\n         \"src\": \"src/\",\n         \"dest\": \"cpp_build/src/\",\n         \"include_patterns\": [\"*.cpp\", \"*.cc\"]},\n    ],\n)\n\ncc_binary(\n    name = \"cpp_app\",\n    srcs = [\":prepare_cpp_workspace\"],\n    includes = [\"cpp_build/include\"],\n    # ... rest of configuration\n)\n```\n\n## Custom Rule Development\n\n### Creating File-Operation-Aware Rules\n\nCreate custom rules that use file operations internally:\n\n\u003CTabs>\n\u003CTabItem label=\"rule_definition.bzl\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\ndef _workspace_setup_impl(ctx):\n    \"\"\"Custom rule that uses file operations\"\"\"\n\n    # Create file operations configuration\n    operations = []\n\n    # Create base directories\n    for dir in ctx.attr.directories:\n        operations.append({\n            \"operation\": \"create_directory\",\n            \"path\": dir,\n        })\n\n    # Copy source files\n    for src_file in ctx.files.srcs:\n        dest_path = ctx.attr.dest_dir + \"/\" + src_file.basename\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": src_file.path,\n            \"dest\": dest_path,\n        })\n\n    # Execute file operations\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_file_ops\",\n        operations = operations,\n        implementation = ctx.attr.implementation,\n        security_level = ctx.attr.security_level,\n    )\n\nworkspace_setup = rule(\n    implementation = _workspace_setup_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        \"directories\": attr.string_list(),\n        \"dest_dir\": attr.string(mandatory = True),\n        \"implementation\": attr.string(default = \"auto\"),\n        \"security_level\": attr.string(default = \"standard\"),\n    },\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"//:rule_definition.bzl\", \"workspace_setup\")\n\nworkspace_setup(\n    name = \"my_workspace\",\n    srcs = [\"main.cpp\", \"utils.cpp\"],\n    directories = [\"build/src\", \"build/include\", \"build/test\"],\n    dest_dir = \"build/src\",\n    implementation = \"tinygo\",\n    security_level = \"high\",\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Rule Composition\n\nCompose file operations with other Bazel actions:\n\n```python\ndef _complex_build_impl(ctx):\n    \"\"\"Rule combining file ops with other actions\"\"\"\n\n    # Step 1: Prepare workspace with file operations\n    workspace_files = file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_prepare\",\n        operations = ctx.attr.prepare_operations,\n    )\n\n    # Step 2: Run code generation\n    generated_files = ctx.actions.run(\n        executable = ctx.executable.codegen_tool,\n        arguments = [\"--input\", workspace_files[0].path],\n        inputs = workspace_files,\n        outputs = [ctx.actions.declare_file(\"generated.cpp\")],\n    )\n\n    # Step 3: Organize generated files with file operations\n    final_files = file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_organize\",\n        operations = [\n            {\"operation\": \"copy_file\",\n             \"src\": generated_files[0].path,\n             \"dest\": \"final/generated.cpp\"},\n        ],\n        inputs = generated_files,\n    )\n\n    return [DefaultInfo(files = depset(final_files))]\n```\n\n## Toolchain Integration\n\n### Custom Toolchain with File Operations\n\nCreate toolchains that use file operations:\n\n\u003CTabs>\n\u003CTabItem label=\"toolchain_definition.bzl\">\n```python\ndef _my_toolchain_impl(ctx):\n    \"\"\"Toolchain that uses file operations for setup\"\"\"\n\n    toolchain_info = platform_common.ToolchainInfo(\n        file_ops = ctx.executable.file_ops,\n        setup_workspace = ctx.attr.setup_operations,\n        compiler = ctx.executable.compiler,\n    )\n\n    return [toolchain_info]\n\nmy_toolchain = rule(\n    implementation = _my_toolchain_impl,\n    attrs = {\n        \"file_ops\": attr.label(\n            executable = True,\n            cfg = \"exec\",\n            default = \"@bazel_file_ops_component//tools:file_ops\",\n        ),\n        \"setup_operations\": attr.string_list(),\n        \"compiler\": attr.label(executable = True, cfg = \"exec\"),\n    },\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\":toolchain_definition.bzl\", \"my_toolchain\")\n\nmy_toolchain(\n    name = \"my_toolchain_impl\",\n    setup_operations = [\n        '{\"operation\": \"create_directory\", \"path\": \"workspace\"}',\n        '{\"operation\": \"copy_directory\", \"src\": \"templates/\", \"dest\": \"workspace/\"}',\n    ],\n    compiler = \":my_compiler\",\n)\n\ntoolchain(\n    name = \"my_toolchain\",\n    toolchain = \":my_toolchain_impl\",\n    toolchain_type = \":my_toolchain_type\",\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Using File Operations in Toolchain Actions\n\n```python\ndef _use_toolchain_impl(ctx):\n    \"\"\"Use toolchain with file operations\"\"\"\n\n    toolchain = ctx.toolchains[\":my_toolchain_type\"]\n\n    # Setup workspace using toolchain file operations\n    ctx.actions.run(\n        executable = toolchain.file_ops,\n        arguments = [\n            \"process_json_config\",\n            \"--config\", json.encode({\n                \"operations\": [json.decode(op) for op in toolchain.setup_operations]\n            })\n        ],\n        outputs = [ctx.actions.declare_directory(\"workspace\")],\n    )\n\n    # Use compiler on prepared workspace\n    ctx.actions.run(\n        executable = toolchain.compiler,\n        arguments = [\"--workspace\", \"workspace\", \"--output\", ctx.outputs.executable.path],\n        inputs = [workspace_dir],\n        outputs = [ctx.outputs.executable],\n    )\n```\n\n## Advanced Patterns\n\n### Conditional File Operations\n\nOperations based on platform or configuration:\n\n```python\ndef _conditional_ops_impl(ctx):\n    \"\"\"Conditional file operations based on platform\"\"\"\n\n    operations = []\n\n    # Base operations\n    operations.extend([\n        {\"operation\": \"create_directory\", \"path\": \"build\"},\n        {\"operation\": \"copy_file\", \"src\": \"main.cpp\", \"dest\": \"build/main.cpp\"},\n    ])\n\n    # Platform-specific operations\n    if ctx.target_platform_has_constraint(ctx.attr._windows_constraint[platform_common.ConstraintValueInfo]):\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": \"windows_config.h\",\n            \"dest\": \"build/config.h\"\n        })\n    else:\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": \"unix_config.h\",\n            \"dest\": \"build/config.h\"\n        })\n\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_ops\",\n        operations = operations,\n    )\n```\n\n### Parametric File Operations\n\nOperations based on rule attributes:\n\n```python\ndef _parametric_setup_impl(ctx):\n    \"\"\"File operations based on rule parameters\"\"\"\n\n    operations = []\n\n    # Dynamic directory creation\n    for component in ctx.attr.components:\n        operations.append({\n            \"operation\": \"create_directory\",\n            \"path\": f\"workspace/{component}\"\n        })\n\n    # Conditional file copying\n    if ctx.attr.include_tests:\n        operations.append({\n            \"operation\": \"copy_directory\",\n            \"src\": \"test/\",\n            \"dest\": \"workspace/test/\",\n            \"include_patterns\": [\"*_test.cpp\"]\n        })\n\n    # Template-based file generation\n    for template in ctx.attr.templates:\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": f\"templates/{template}.template\",\n            \"dest\": f\"workspace/{template}\"\n        })\n\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_setup\",\n        operations = operations,\n        implementation = \"rust\" if len(operations) > 10 else \"tinygo\",\n    )\n```\n\n## Migration Guidelines\n\n### From Shell Scripts\n\n\u003CTabs>\n\u003CTabItem label=\"Before\">\n```python\ngenrule(\n    name = \"prepare\",\n    srcs = [\"input.txt\"],\n    outs = [\"output.txt\"],\n    cmd = \"\"\"\n        mkdir -p $$(dirname $@)\n        cp $\u003C $@\n        sed 's/old/new/g' $@ > $@.tmp\n        mv $@.tmp $@\n        chmod 644 $@\n    \"\"\",\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"After\">\n```python\nfile_ops_action(\n    name = \"prepare_files\",\n    srcs = [\"input.txt\"],\n    outs = [\"prepared/input.txt\"],\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"prepared\"},\n        {\"operation\": \"copy_file\", \"src\": \"input.txt\", \"dest\": \"prepared/input.txt\"},\n    ],\n)\n\n# Use separate action for text processing (not file operations)\ngenrule(\n    name = \"prepare\",\n    srcs = [\":prepare_files\"],\n    outs = [\"output.txt\"],\n    cmd = \"sed 's/old/new/g' $\u003C > $@\",\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Best Practices\n\n1. **Separate Concerns**: Use file operations for file/directory manipulation, other tools for content processing\n2. **Security First**: Always specify appropriate security levels\n3. **Performance**: Choose implementation based on operation characteristics\n4. **Error Handling**: Provide meaningful error messages in custom rules\n5. **Testing**: Create comprehensive tests for rule integrations\n\n## Troubleshooting Integration\n\n### Common Issues\n\n**File operations not found:**\n```bash\n# Check component availability\nbazel query @bazel_file_ops_component//...\n\n# Verify load statement\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n```\n\n**Custom rule failures:**\n```python\n# Add debug logging to rules\nprint(\"Operations:\", operations)\nprint(\"Implementation:\", ctx.attr.implementation)\n```\n\n**Toolchain integration problems:**\n```bash\n# Check toolchain registration\nbazel query \"config(@bazel_file_ops_component//toolchain:all)\"\n\n# Debug toolchain resolution\nbazel build --toolchain_resolution_debug //:target\n```\n\n## Next Steps\n\n- **[Security Configuration](/security/)** - Configure security for your integrations\n- **[Examples](/examples/)** - See real-world integration examples\n- **[API Reference](/api-reference/)** - Detailed API documentation\n- **[Troubleshooting](/troubleshooting/)** - Common integration issues","src/content/docs/integration/index.mdx","5d8cb3bedb744e20","integration/index.mdx","troubleshooting",{"id":52,"data":54,"body":57,"filePath":58,"digest":59,"legacyId":60,"deferredRender":33},{"title":55,"description":56},"Troubleshooting","Common issues and solutions for Bazel File Operations Component","import { Code, Tabs, TabItem, Card, CardGrid, Badge } from '@astrojs/starlight/components';\n\n## Common Issues\n\nThis guide helps you diagnose and resolve common issues when using the Bazel File Operations Component.\n\n## Installation Issues\n\n### Module Not Found\n\n**Error:**\n```\nERROR: no such package '@bazel_file_ops_component//bazel': BUILD file not found in directory 'bazel' of external repository @bazel_file_ops_component\n```\n\n**Solutions:**\n\n\u003CTabs>\n\u003CTabItem label=\"Check MODULE.bazel\">\n```python\n# Ensure correct dependency declaration\nbazel_dep(name = \"bazel_file_ops_component\", version = \"1.0.0\")\n\n# For development versions\ngit_override(\n    module_name = \"bazel_file_ops_component\",\n    remote = \"https://github.com/pulseengine/bazel-file-ops-component.git\",\n    commit = \"main\",  # Use specific commit hash\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Verify Repository\">\n```bash\n# Check if repository is accessible\nbazel query @bazel_file_ops_component//...\n\n# Clean and rebuild\nbazel clean --expunge\nbazel build //:your_target\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Load Statement Errors\n\n**Error:**\n```\nERROR: Extension file 'bazel:defs.bzl' not found in package '@bazel_file_ops_component//bazel'\n```\n\n**Solution:**\n```python\n# Correct load statement\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\n# Common typos to avoid:\n# load(\"@bazel_file_ops_component:defs.bzl\", ...)  # ❌ Missing //bazel\n# load(\"@bazel-file-ops-component//...\", ...)      # ❌ Hyphens instead of underscores\n```\n\n### Dependency Resolution Failures\n\n**Error:**\n```\nERROR: Analysis of target '//:my_target' failed; build aborted: no such target '@bazel_file_ops_component//tools:file_ops'\n```\n\n**Solutions:**\n\n1. **Update to Latest Version:**\n```python\ngit_override(\n    module_name = \"bazel_file_ops_component\",\n    remote = \"https://github.com/pulseengine/bazel-file-ops-component.git\",\n    commit = \"latest-stable-commit-hash\",\n)\n```\n\n2. **Check Available Targets:**\n```bash\nbazel query @bazel_file_ops_component//...\n```\n\n## Build Issues\n\n### WebAssembly Toolchain Not Found\n\n**Error:**\n```\nERROR: No toolchain found for target platform. WebAssembly compilation requires appropriate toolchain.\n```\n\n**Solutions:**\n\n\u003CTabs>\n\u003CTabItem label=\"Add Required Dependencies\">\n```python\n# Add to MODULE.bazel\nbazel_dep(name = \"rules_rust\", version = \"0.62.0\")\nbazel_dep(name = \"rules_go\", version = \"0.55.1\")\n\n# For WASI SDK (C++ components)\nbazel_dep(name = \"rules_cc\", version = \"0.1.1\")\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Register Toolchains\">\n```python\n# Rust toolchain\nrust = use_extension(\"@rules_rust//rust:extensions.bzl\", \"rust\")\nrust.toolchain(edition = \"2021\")\nuse_repo(rust, \"rust_toolchains\")\nregister_toolchains(\"@rust_toolchains//:all\")\n\n# Go toolchain (for TinyGo)\ngo_sdk = use_extension(\"@rules_go//go:extensions.bzl\", \"go_sdk\")\ngo_sdk.download(version = \"1.23.0\")\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Component Compilation Failures\n\n**Error:**\n```\nERROR: failed to build component: compilation failed with exit code 1\n```\n\n**Debug Steps:**\n\n1. **Enable Verbose Output:**\n```bash\nbazel build //:target --verbose_failures --sandbox_debug\n```\n\n2. **Check Implementation:**\n```python\nfile_ops_action(\n    name = \"debug_build\",\n    implementation = \"tinygo\",  # Try specific implementation\n    operations = [...],\n)\n```\n\n3. **Verify Rust/Go Installation:**\n```bash\n# Check Rust toolchain\nbazel query @rules_rust//...\n\n# Check Go toolchain\nbazel query @rules_go//...\n```\n\n## Runtime Issues\n\n### File Operation Failures\n\n**Error:**\n```\nERROR: File operation failed: copy_file from 'source.txt' to 'dest.txt': No such file or directory\n```\n\n**Solutions:**\n\n\u003CTabs>\n\u003CTabItem label=\"Check File Paths\">\n```python\nfile_ops_action(\n    name = \"debug_paths\",\n    srcs = [\"source.txt\"],  # Ensure file exists\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"source.txt\", \"dest\": \"output.txt\"},\n    ],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Verify File Existence\">\n```bash\n# Check if source files exist\nls -la source.txt\n\n# Check Bazel file inputs\nbazel query 'deps(//:target)' --output=build\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Enable Debug Logging\">\n```bash\nexport FILE_OPS_LOG_LEVEL=debug\nbazel build //:target --verbose_failures\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Security Violations\n\n**Error:**\n```\nERROR: Path traversal detected: ../../../etc/passwd\nERROR: Unauthorized path access: /etc/hosts\n```\n\n**Solutions:**\n\n1. **Check Security Configuration:**\n```python\nfile_ops_action(\n    name = \"secure_ops\",\n    security_level = \"standard\",  # Try lower security level for debugging\n    allowed_paths = [\n        \"/tmp/workspace\",\n        \"${BAZEL_WORKSPACE}/*\",  # Allow workspace access\n    ],\n    operations = [...],\n)\n```\n\n2. **Use Absolute Paths:**\n```python\n# ❌ Problematic relative paths\n{\"operation\": \"copy_file\", \"src\": \"../external/file.txt\", \"dest\": \"output.txt\"}\n\n# ✅ Safe absolute paths within workspace\n{\"operation\": \"copy_file\", \"src\": \"external/file.txt\", \"dest\": \"build/output.txt\"}\n```\n\n### Permission Denied Errors\n\n**Error:**\n```\nERROR: Permission denied: cannot write to /protected/directory\n```\n\n**Solutions:**\n\n\u003CTabs>\n\u003CTabItem label=\"Check Directory Permissions\">\n```bash\n# Check target directory permissions\nls -la /protected/directory\n\n# Ensure Bazel has write access\nsudo chown -R $USER:$USER /tmp/bazel-workspace\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Use Bazel Output Directories\">\n```python\nfile_ops_action(\n    name = \"safe_output\",\n    operations = [\n        # Use Bazel's output directories\n        {\"operation\": \"create_directory\", \"path\": \"bazel-out/workspace\"},\n        {\"operation\": \"copy_file\", \"src\": \"input.txt\", \"dest\": \"bazel-out/workspace/output.txt\"},\n    ],\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Performance Issues\n\n### Slow File Operations\n\n**Symptoms:**\n- Long build times\n- High memory usage\n- Component timeouts\n\n**Solutions:**\n\n1. **Choose Appropriate Implementation:**\n```python\n# For large files or batch operations\nfile_ops_action(\n    name = \"large_file_ops\",\n    implementation = \"rust\",  # Better performance\n    operations = [...],\n)\n\n# For small files and security\nfile_ops_action(\n    name = \"small_file_ops\",\n    implementation = \"tinygo\",  # Lower overhead\n    operations = [...],\n)\n```\n\n2. **Optimize Operations:**\n```python\n# ❌ Inefficient: Many individual operations\noperations = [\n    {\"operation\": \"copy_file\", \"src\": f\"file{i}.txt\", \"dest\": f\"output{i}.txt\"}\n    for i in range(100)\n]\n\n# ✅ Efficient: Single directory operation\noperations = [\n    {\"operation\": \"copy_directory\", \"src\": \"files/\", \"dest\": \"output/\"}\n]\n```\n\n3. **Enable Performance Monitoring:**\n```bash\nexport FILE_OPS_PROFILE=true\nexport FILE_OPS_LOG_LEVEL=info\nbazel build //:target --verbose_failures\n```\n\n### Memory Issues\n\n**Error:**\n```\nERROR: WebAssembly runtime out of memory\n```\n\n**Solutions:**\n\n1. **Reduce Batch Size:**\n```python\n# Split large operations into smaller batches\nfile_ops_action(\n    name = \"batch1\",\n    operations = operations[:50],  # First 50 operations\n)\n\nfile_ops_action(\n    name = \"batch2\",\n    operations = operations[50:100],  # Next 50 operations\n    deps = [\":batch1\"],\n)\n```\n\n2. **Use Streaming for Large Files:**\n```python\nfile_ops_action(\n    name = \"large_file_copy\",\n    implementation = \"rust\",  # Better memory management\n    operations = [\n        {\n            \"operation\": \"copy_file\",\n            \"src\": \"large_file.bin\",\n            \"dest\": \"output.bin\",\n            \"streaming\": True,  # Enable streaming\n            \"buffer_size_kb\": 1024,\n        },\n    ],\n)\n```\n\n## Integration Issues\n\n### Custom Rule Problems\n\n**Error:**\n```\nERROR: in custom rule: file_ops_action() got unexpected keyword argument 'ctx'\n```\n\n**Solution:**\n```python\n# ❌ Incorrect usage\nfile_ops_action(\n    ctx = ctx,  # Don't pass ctx directly\n    name = \"ops\",\n    operations = [...],\n)\n\n# ✅ Correct usage\ndef _my_rule_impl(ctx):\n    # Use ctx to prepare operations, then call file_ops_action normally\n    operations = [...]\n\n    file_ops_action(\n        name = ctx.attr.name + \"_file_ops\",\n        operations = operations,\n    )\n```\n\n### Toolchain Integration Issues\n\n**Error:**\n```\nERROR: No matching toolchains found for types @bazel_file_ops_component//toolchain:file_ops_toolchain_type\n```\n\n**Solutions:**\n\n1. **Register Toolchain:**\n```python\n# In MODULE.bazel\nregister_toolchains(\"@bazel_file_ops_component//toolchain:all\")\n```\n\n2. **Check Platform Compatibility:**\n```bash\n# List available toolchains\nbazel query \"config(@bazel_file_ops_component//toolchain:all)\"\n\n# Check platform constraints\nbazel config --verbose --platform=@platforms//host:all\n```\n\n## Debugging Techniques\n\n### Enable Debug Logging\n\n\u003CTabs>\n\u003CTabItem label=\"Environment Variables\">\n```bash\n# Enable comprehensive debugging\nexport FILE_OPS_DEBUG=true\nexport FILE_OPS_LOG_LEVEL=debug\nexport FILE_OPS_TRACE_OPERATIONS=true\n\n# Run with debug output\nbazel build //:target --verbose_failures\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Bazel Configuration\">\n```python\nfile_ops_action(\n    name = \"debug_ops\",\n    operations = [...],\n    enable_debug_logging = True,\n    enable_audit_logging = True,\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Inspect Component State\n\n```bash\n# Check component availability\nbazel query @bazel_file_ops_component//...\n\n# Inspect specific targets\nbazel query 'deps(//:my_target)' --output=build\n\n# Check execution environment\nbazel info execution_root\nbazel info output_base\n```\n\n### Test Minimal Examples\n\nCreate minimal test cases to isolate issues:\n\n```python\n# Minimal working example\nfile_ops_test(\n    name = \"minimal_test\",\n    srcs = [\"test.txt\"],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"test.txt\", \"dest\": \"output.txt\"},\n    ],\n)\n```\n\n## Platform-Specific Issues\n\n### Windows Issues\n\n**Path Separator Problems:**\n```python\n# ❌ Unix-style paths on Windows\n{\"operation\": \"copy_file\", \"src\": \"src/file.txt\", \"dest\": \"dest/file.txt\"}\n\n# ✅ Use forward slashes (Bazel normalizes)\n{\"operation\": \"copy_file\", \"src\": \"src/file.txt\", \"dest\": \"dest/file.txt\"}\n```\n\n**Long Path Names:**\n```python\n# Enable long path support on Windows\nfile_ops_action(\n    name = \"windows_long_paths\",\n    enable_long_paths = True,  # Windows-specific option\n    operations = [...],\n)\n```\n\n### macOS Issues\n\n**Xcode Command Line Tools:**\n```bash\n# Ensure Xcode tools are installed\nxcode-select --install\n\n# Check clang availability\nwhich clang\n```\n\n### Linux Issues\n\n**GLIBC Compatibility:**\n```bash\n# Check glibc version\nldd --version\n\n# Use older glibc if needed\nbazel build --crosstool_top=@bazel_tools//tools/cpp:toolchain //:target\n```\n\n## Getting Help\n\n### Collect Debug Information\n\nWhen reporting issues, include:\n\n1. **Environment Information:**\n```bash\nbazel version\necho $OS, $ARCH\ncat MODULE.bazel | grep bazel_file_ops_component\n```\n\n2. **Error Logs:**\n```bash\n# Full verbose output\nbazel build //:target --verbose_failures --sandbox_debug > debug.log 2>&1\n```\n\n3. **Minimal Reproduction:**\n```python\n# Create minimal BUILD.bazel that reproduces the issue\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\nfile_ops_action(\n    name = \"reproduce_issue\",\n    operations = [\n        # Minimal operations that cause the problem\n    ],\n)\n```\n\n### Community Resources\n\n\u003CCardGrid>\n  \u003CCard title=\"🐛 GitHub Issues\" icon=\"github\">\n    [Report bugs and request features](https://github.com/pulseengine/bazel-file-ops-component/issues)\n  \u003C/Card>\n  \u003CCard title=\"💬 Discussions\" icon=\"comment\">\n    [Community discussions and Q&A](https://github.com/pulseengine/bazel-file-ops-component/discussions)\n  \u003C/Card>\n  \u003CCard title=\"📖 Documentation\" icon=\"document\">\n    [Complete documentation](https://pulseengine.github.io/bazel-file-ops-component/)\n  \u003C/Card>\n  \u003CCard title=\"🚀 Examples\" icon=\"rocket\">\n    [Working examples repository](https://github.com/pulseengine/bazel-file-ops-component/tree/main/examples)\n  \u003C/Card>\n\u003C/CardGrid>\n\n### Issue Template\n\nWhen reporting issues, please use this template:\n\n```markdown\n## Bug Report\n\n**Environment:**\n- Bazel version:\n- OS:\n- Component version:\n\n**Expected Behavior:**\n[Describe what should happen]\n\n**Actual Behavior:**\n[Describe what actually happens]\n\n**Minimal Reproduction:**\n```python\n# Include minimal BUILD.bazel that reproduces the issue\n```\n\n**Error Logs:**\n```\n# Include full error output with --verbose_failures\n```\n\n**Additional Context:**\n[Any other relevant information]\n```\n\n## Quick Reference\n\n### Common Commands\n\n```bash\n# Clean build\nbazel clean --expunge && bazel build //:target\n\n# Verbose debugging\nbazel build //:target --verbose_failures --sandbox_debug\n\n# Query dependencies\nbazel query 'deps(//:target)' --output=build\n\n# Check toolchains\nbazel query \"config(@bazel_file_ops_component//...)\"\n\n# Test with logging\nFILE_OPS_LOG_LEVEL=debug bazel test //:test\n```\n\n### Environment Variables\n\n| Variable | Description | Values |\n|----------|-------------|--------|\n| `FILE_OPS_DEBUG` | Enable debug mode | `true`, `false` |\n| `FILE_OPS_LOG_LEVEL` | Logging level | `debug`, `info`, `warn`, `error` |\n| `FILE_OPS_IMPLEMENTATION` | Force implementation | `tinygo`, `rust`, `auto` |\n| `FILE_OPS_SECURITY_LEVEL` | Default security | `low`, `standard`, `high` |\n| `FILE_OPS_TRACE_OPERATIONS` | Trace all operations | `true`, `false` |\n\nThis troubleshooting guide should help you resolve most common issues. If you encounter problems not covered here, please [open an issue](https://github.com/pulseengine/bazel-file-ops-component/issues) with detailed information.","src/content/docs/troubleshooting/index.mdx","53348b035be8719f","troubleshooting/index.mdx","api-reference",{"id":61,"data":63,"body":66,"filePath":67,"digest":68,"legacyId":69,"deferredRender":33},{"title":64,"description":65},"API Reference","Complete API documentation for Bazel File Operations Component","import { Code, Tabs, TabItem, Badge } from '@astrojs/starlight/components';\n\n## Bazel Rules\n\n### file_ops_action\n\nCore rule for executing file operations.\n\n```python\nfile_ops_action(\n    name,\n    operations = [],\n    implementation = \"auto\",\n    security_level = \"standard\",\n    config_file = None,\n    allowed_paths = [],\n    srcs = [],\n    outs = [],\n    **kwargs\n)\n```\n\n#### Parameters\n\n| Parameter | Type | Default | Description |\n|-----------|------|---------|-------------|\n| `name` | `string` | **required** | Unique name for this action |\n| `operations` | `list[dict]` | `[]` | List of file operations to execute |\n| `implementation` | `string` | `\"auto\"` | Implementation: `\"auto\"`, `\"tinygo\"`, `\"rust\"` |\n| `security_level` | `string` | `\"standard\"` | Security: `\"low\"`, `\"standard\"`, `\"high\"` |\n| `config_file` | `label` | `None` | JSON configuration file for batch operations |\n| `allowed_paths` | `list[string]` | `[]` | Additional allowed paths for operations |\n| `srcs` | `list[label]` | `[]` | Source files for the operation |\n| `outs` | `list[label]` | `[]` | Expected output files |\n\n#### Examples\n\n\u003CTabs>\n\u003CTabItem label=\"Basic Operations\">\n```python\nfile_ops_action(\n    name = \"setup\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"build\"},\n        {\"operation\": \"copy_file\", \"src\": \"main.cpp\", \"dest\": \"build/main.cpp\"},\n    ],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"High Security\">\n```python\nfile_ops_action(\n    name = \"secure_copy\",\n    implementation = \"tinygo\",\n    security_level = \"high\",\n    allowed_paths = [\"/tmp/safe-workspace\"],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"secret.txt\", \"dest\": \"/tmp/safe-workspace/backup.txt\"},\n    ],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Batch Processing\">\n```python\nfile_ops_action(\n    name = \"batch_ops\",\n    implementation = \"rust\",\n    config_file = \"operations.json\",\n    srcs = [\"operations.json\", \"input1.txt\", \"input2.txt\"],\n    outs = [\"output1.txt\", \"output2.txt\"],\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### file_ops_test\n\nTest rule for validating file operations.\n\n```python\nfile_ops_test(\n    name,\n    operations = [],\n    expected_outputs = [],\n    **kwargs\n)\n```\n\n#### Parameters\n\n| Parameter | Type | Description |\n|-----------|------|-------------|\n| `name` | `string` | Test name |\n| `operations` | `list[dict]` | Operations to test |\n| `expected_outputs` | `list[string]` | Files that should be created |\n\n#### Example\n\n```python\nfile_ops_test(\n    name = \"copy_test\",\n    srcs = [\"input.txt\"],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"input.txt\", \"dest\": \"output.txt\"},\n    ],\n    expected_outputs = [\"output.txt\"],\n)\n```\n\n## File Operations\n\n### copy_file\n\nCopy a single file with metadata preservation.\n\n#### Parameters\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `operation` | `string` | ✅ | Must be `\"copy_file\"` |\n| `src` | `string` | ✅ | Source file path |\n| `dest` | `string` | ✅ | Destination file path |\n| `preserve_metadata` | `bool` | ❌ | Preserve timestamps and permissions (default: `true`) |\n| `overwrite` | `bool` | ❌ | Overwrite existing files (default: `true`) |\n\n#### Examples\n\n\u003CTabs>\n\u003CTabItem label=\"Basic Copy\">\n```json\n{\n  \"operation\": \"copy_file\",\n  \"src\": \"source.txt\",\n  \"dest\": \"destination.txt\"\n}\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Preserve Metadata\">\n```json\n{\n  \"operation\": \"copy_file\",\n  \"src\": \"important.txt\",\n  \"dest\": \"backup.txt\",\n  \"preserve_metadata\": true,\n  \"overwrite\": false\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### copy_directory\n\nRecursively copy directories with filtering support.\n\n#### Parameters\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `operation` | `string` | ✅ | Must be `\"copy_directory\"` |\n| `src` | `string` | ✅ | Source directory path |\n| `dest` | `string` | ✅ | Destination directory path |\n| `recursive` | `bool` | ❌ | Copy subdirectories (default: `true`) |\n| `include_patterns` | `list[string]` | ❌ | Include only matching files |\n| `exclude_patterns` | `list[string]` | ❌ | Exclude matching files |\n| `preserve_metadata` | `bool` | ❌ | Preserve timestamps (default: `true`) |\n\n#### Examples\n\n\u003CTabs>\n\u003CTabItem label=\"Simple Copy\">\n```json\n{\n  \"operation\": \"copy_directory\",\n  \"src\": \"src/\",\n  \"dest\": \"build/src/\"\n}\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Filtered Copy\">\n```json\n{\n  \"operation\": \"copy_directory\",\n  \"src\": \"headers/\",\n  \"dest\": \"build/include/\",\n  \"include_patterns\": [\"*.h\", \"*.hpp\"],\n  \"exclude_patterns\": [\"*_test.h\", \"*.tmp\"]\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### create_directory\n\nCreate directories with automatic parent creation.\n\n#### Parameters\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `operation` | `string` | ✅ | Must be `\"create_directory\"` |\n| `path` | `string` | ✅ | Directory path to create |\n| `parents` | `bool` | ❌ | Create parent directories (default: `true`) |\n| `permissions` | `string` | ❌ | Directory permissions (default: `\"755\"`) |\n\n#### Examples\n\n\u003CTabs>\n\u003CTabItem label=\"Basic Directory\">\n```json\n{\n  \"operation\": \"create_directory\",\n  \"path\": \"build/output\"\n}\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Custom Permissions\">\n```json\n{\n  \"operation\": \"create_directory\",\n  \"path\": \"secure/\",\n  \"permissions\": \"700\"\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### process_json_config \u003CBadge text=\"Rust Only\" variant=\"note\" />\n\nProcess complex JSON configurations with batch operations.\n\n#### Parameters\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `operation` | `string` | ✅ | Must be `\"process_json_config\"` |\n| `config` | `object` | ✅ | JSON configuration object |\n\n#### JSON Configuration Format\n\n```json\n{\n  \"workspace_dir\": \"/build/workspace\",\n  \"security\": {\n    \"level\": \"high\",\n    \"allowed_paths\": [\"/tmp/safe\", \"/build/*\"]\n  },\n  \"operations\": [\n    {\"type\": \"copy_file\", \"src_path\": \"a.txt\", \"dest_path\": \"b.txt\"},\n    {\"type\": \"mkdir\", \"path\": \"output\"},\n    {\"type\": \"copy_directory\", \"src_path\": \"src/\", \"dest_path\": \"build/src/\"}\n  ]\n}\n```\n\n#### Example\n\n```json\n{\n  \"operation\": \"process_json_config\",\n  \"config\": {\n    \"workspace_dir\": \"/tmp/workspace\",\n    \"operations\": [\n      {\"type\": \"mkdir\", \"path\": \"build\"},\n      {\"type\": \"copy_file\", \"src_path\": \"main.cpp\", \"dest_path\": \"build/main.cpp\"}\n    ]\n  }\n}\n```\n\n## Implementation Selection\n\n### Auto Selection\n\nThe `\"auto\"` implementation chooses based on operation characteristics:\n\n| Condition | Selected Implementation |\n|-----------|-------------------------|\n| Security level = \"high\" | TinyGo |\n| Large files (>10MB) | Rust |\n| JSON batch processing | Rust |\n| Default | TinyGo |\n\n### TinyGo Implementation\n\n\u003CBadge text=\"Security Focused\" variant=\"tip\" />\n\n**Best for:**\n- Security-critical applications\n- Small to medium files (under 10MB)\n- Memory-constrained environments\n- Maximum WebAssembly sandboxing\n\n**Characteristics:**\n- Binary size: ~2MB\n- Memory usage: ~8MB\n- Startup time: ~50ms\n- Security: Maximum isolation\n\n### Rust Implementation\n\n\u003CBadge text=\"Performance Optimized\" variant=\"caution\" />\n\n**Best for:**\n- High-throughput operations\n- Large files (>10MB)\n- Complex JSON processing\n- Batch operations\n\n**Characteristics:**\n- Binary size: ~8MB\n- Memory usage: ~16MB\n- Startup time: ~100ms\n- Features: Advanced JSON, streaming I/O\n\n## Security Levels\n\n### Low Security\n\n- Minimal path validation\n- Basic WebAssembly sandboxing\n- Fastest performance\n- **Use case**: Development, testing\n\n```python\nfile_ops_action(\n    name = \"dev_ops\",\n    security_level = \"low\",\n    operations = [...],\n)\n```\n\n### Standard Security\n\n- Path traversal protection\n- Preopen directory validation\n- Balanced performance/security\n- **Use case**: Production builds\n\n```python\nfile_ops_action(\n    name = \"build_ops\",\n    security_level = \"standard\",  # Default\n    operations = [...],\n)\n```\n\n### High Security\n\n- Maximum WebAssembly isolation\n- Strict path validation\n- Capability-based file access\n- **Use case**: Security-critical applications\n\n```python\nfile_ops_action(\n    name = \"secure_ops\",\n    security_level = \"high\",\n    allowed_paths = [\"/tmp/safe-workspace\"],\n    operations = [...],\n)\n```\n\n## Error Codes\n\n### Operation Errors\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `FILE_NOT_FOUND` | Source file does not exist | Check file paths |\n| `PERMISSION_DENIED` | Insufficient permissions | Check file/directory permissions |\n| `PATH_TRAVERSAL` | Path traversal attempt detected | Use safe paths within workspace |\n| `INVALID_OPERATION` | Unknown operation type | Check operation name spelling |\n\n### Security Errors\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `SANDBOX_VIOLATION` | WebAssembly sandbox violation | Check allowed_paths configuration |\n| `UNAUTHORIZED_PATH` | Path not in allowed list | Add path to allowed_paths |\n| `CAPABILITY_DENIED` | Missing capability for operation | Review security level settings |\n\n### Implementation Errors\n\n| Code | Description | Resolution |\n|------|-------------|------------|\n| `COMPONENT_NOT_FOUND` | Implementation not available | Check installation |\n| `RUNTIME_ERROR` | WebAssembly runtime error | Check logs for details |\n| `CONFIG_ERROR` | Invalid configuration | Validate JSON configuration |\n\n## Environment Variables\n\n### Configuration\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `FILE_OPS_IMPLEMENTATION` | Force implementation choice | `\"auto\"` |\n| `FILE_OPS_SECURITY_LEVEL` | Default security level | `\"standard\"` |\n| `FILE_OPS_LOG_LEVEL` | Logging verbosity | `\"info\"` |\n| `FILE_OPS_PROFILE` | Enable performance profiling | `\"false\"` |\n\n### Debug Settings\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `FILE_OPS_DEBUG` | Enable debug mode | `\"false\"` |\n| `FILE_OPS_TRACE_OPERATIONS` | Trace all operations | `\"false\"` |\n| `FILE_OPS_VALIDATE_PATHS` | Extra path validation | `\"true\"` |\n\n## Performance Metrics\n\n### Benchmarks\n\n| Operation | File Size | TinyGo | Rust | Native |\n|-----------|-----------|--------|------|--------|\n| copy_file | 1MB | 45ms | 32ms | 28ms |\n| copy_file | 10MB | 280ms | 195ms | 180ms |\n| copy_directory | 100 files | 520ms | 380ms | 350ms |\n| create_directory | N/A | 15ms | 12ms | 8ms |\n\n### Memory Usage\n\n| Implementation | Startup | Peak Usage | Steady State |\n|---------------|---------|------------|--------------|\n| TinyGo | 8MB | 12MB | 10MB |\n| Rust | 16MB | 24MB | 20MB |\n\n*Benchmarks on Linux x64, averaged over 100 runs*","src/content/docs/api-reference/index.mdx","a56b678420a17b30","api-reference/index.mdx","getting-started",{"id":70,"data":72,"body":75,"filePath":76,"digest":77,"legacyId":78,"deferredRender":33},{"title":73,"description":74},"Getting Started","Your first file operations with Bazel File Operations Component","import { Code, Tabs, TabItem, Card, CardGrid } from '@astrojs/starlight/components';\n\n## Quick Start\n\nGet up and running with file operations in under 5 minutes.\n\n### 1. Installation\n\nFirst, add the component to your `MODULE.bazel`:\n\n```python\nbazel_dep(name = \"bazel_file_ops_component\", version = \"1.0.0\")\n```\n\n### 2. Your First Operation\n\nCreate a simple file copy operation:\n\n\u003CTabs>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_test\")\n\n# Simple file copy test\nfile_ops_test(\n    name = \"copy_test\",\n    srcs = [\"input.txt\"],\n    operations = [\n        {\n            \"operation\": \"copy_file\",\n            \"src\": \"input.txt\",\n            \"dest\": \"output.txt\",\n        },\n    ],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"input.txt\">\n```\nHello, Bazel File Operations Component!\nThis file will be copied using WebAssembly.\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### 3. Run the Operation\n\n```bash\nbazel test //:copy_test\n```\n\n**Expected output:**\n```\nINFO: Analyzed target //:copy_test (2 packages loaded, 8 targets configured).\nINFO: Found 1 test target...\nTarget //:copy_test up-to-date:\n  bazel-bin/copy_test\nINFO: Build completed successfully, 1 total action\n//:copy_test                                                             PASSED in 0.1s\n\nExecuted 1 out of 1 test: 1 test passes.\n```\n\n## Core Concepts\n\n### Operations\n\nThe component supports these file operations:\n\n\u003CCardGrid>\n  \u003CCard title=\"copy_file\" icon=\"document\">\n    Copy individual files with metadata preservation\n  \u003C/Card>\n  \u003CCard title=\"copy_directory\" icon=\"folder\">\n    Recursively copy directories with filtering\n  \u003C/Card>\n  \u003CCard title=\"create_directory\" icon=\"add-folder\">\n    Create directories with parent creation\n  \u003C/Card>\n  \u003CCard title=\"process_json_config\" icon=\"setting\">\n    Batch operations from JSON configuration\n  \u003C/Card>\n\u003C/CardGrid>\n\n### Implementation Selection\n\nChoose between two implementations:\n\n\u003CTabs>\n\u003CTabItem label=\"TinyGo (Security)\">\n```python\nload(\"@bazel_file_ops_component//bazel:defs.bzl\", \"file_ops_action\")\n\nfile_ops_action(\n    name = \"secure_ops\",\n    implementation = \"tinygo\",\n    security_level = \"high\",\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"secret.txt\", \"dest\": \"backup.txt\"},\n    ],\n)\n```\n\n**Best for:**\n- Security-critical applications\n- Smaller memory footprint\n- Maximum WebAssembly sandboxing\n\u003C/TabItem>\n\u003CTabItem label=\"Rust (Performance)\">\n```python\nfile_ops_action(\n    name = \"fast_ops\",\n    implementation = \"rust\",\n    security_level = \"standard\",\n    operations = [\n        {\"operation\": \"copy_directory\", \"src\": \"large_dir/\", \"dest\": \"backup/\"},\n    ],\n)\n```\n\n**Best for:**\n- High-throughput operations\n- Large file processing\n- Advanced JSON workflows\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Common Patterns\n\n### Directory Setup\n\nCreate workspace structure:\n\n```python\nfile_ops_action(\n    name = \"setup_workspace\",\n    operations = [\n        {\"operation\": \"create_directory\", \"path\": \"src\"},\n        {\"operation\": \"create_directory\", \"path\": \"include\"},\n        {\"operation\": \"create_directory\", \"path\": \"test\"},\n        {\"operation\": \"copy_file\", \"src\": \"template.cpp\", \"dest\": \"src/main.cpp\"},\n    ],\n)\n```\n\n### File Processing Pipeline\n\nChain operations for complex workflows:\n\n```python\nfile_ops_action(\n    name = \"process_sources\",\n    operations = [\n        # Stage 1: Copy source files\n        {\"operation\": \"copy_directory\", \"src\": \"src/\", \"dest\": \"build/src/\"},\n\n        # Stage 2: Copy headers\n        {\"operation\": \"copy_directory\", \"src\": \"include/\", \"dest\": \"build/include/\"},\n\n        # Stage 3: Create output directories\n        {\"operation\": \"create_directory\", \"path\": \"build/bin\"},\n        {\"operation\": \"create_directory\", \"path\": \"build/lib\"},\n    ],\n)\n```\n\n### JSON Batch Processing\n\nUse JSON for complex operations:\n\n\u003CTabs>\n\u003CTabItem label=\"operations.json\">\n```json\n{\n  \"workspace_dir\": \"/build/workspace\",\n  \"operations\": [\n    {\n      \"type\": \"copy_file\",\n      \"src_path\": \"/source/main.cpp\",\n      \"dest_path\": \"main.cpp\",\n      \"preserve_metadata\": true\n    },\n    {\n      \"type\": \"mkdir\",\n      \"path\": \"include\"\n    },\n    {\n      \"type\": \"copy_directory\",\n      \"src_path\": \"/headers\",\n      \"dest_path\": \"include\",\n      \"recursive\": true,\n      \"exclude_patterns\": [\"*.tmp\", \".*\"]\n    }\n  ]\n}\n```\n\u003C/TabItem>\n\u003CTabItem label=\"BUILD.bazel\">\n```python\nfile_ops_action(\n    name = \"batch_process\",\n    config_file = \"operations.json\",\n    implementation = \"rust\",  # Better JSON support\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Security Features\n\n### Sandboxed Execution\n\nAll operations run in WebAssembly sandboxes:\n\n```python\nfile_ops_action(\n    name = \"secure_copy\",\n    security_level = \"high\",\n    allowed_paths = [\n        \"/tmp/bazel-workspace\",\n        \"/build/output\"\n    ],\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": \"input.txt\", \"dest\": \"/tmp/bazel-workspace/output.txt\"},\n    ],\n)\n```\n\n### Path Validation\n\nAutomatic protection against path traversal:\n\n```python\n# This will be rejected automatically\noperations = [\n    {\"operation\": \"copy_file\", \"src\": \"../../etc/passwd\", \"dest\": \"stolen.txt\"},  # ❌ Blocked\n    {\"operation\": \"copy_file\", \"src\": \"safe.txt\", \"dest\": \"output.txt\"},         # ✅ Allowed\n]\n```\n\n## Error Handling\n\n### Validation Errors\n\n```bash\n$ bazel test //:invalid_copy\nERROR: Invalid operation: source file does not exist: missing.txt\nERROR: Path traversal detected: ../../../secrets.txt\n```\n\n### Runtime Errors\n\n```bash\n$ bazel test //:permission_test\nERROR: Permission denied: cannot write to /etc/hosts\nERROR: WASM sandbox violation: unauthorized path access\n```\n\n## Performance Tips\n\n### Choose the Right Implementation\n\n- **TinyGo**: Files \u003C 10MB, security-critical\n- **Rust**: Files > 10MB, batch processing\n\n### Optimize Operations\n\n```python\n# ❌ Inefficient: Many small operations\nfile_ops_action(\n    name = \"slow_copy\",\n    operations = [\n        {\"operation\": \"copy_file\", \"src\": f\"file{i}.txt\", \"dest\": f\"output{i}.txt\"}\n        for i in range(100)\n    ]\n)\n\n# ✅ Efficient: Directory operation\nfile_ops_action(\n    name = \"fast_copy\",\n    operations = [\n        {\"operation\": \"copy_directory\", \"src\": \"files/\", \"dest\": \"output/\"}\n    ]\n)\n```\n\n## Next Steps\n\nNow that you've completed your first operations:\n\n1. **[Integration Guide](/integration/)** - Integrate with your rule set\n2. **[API Reference](/api-reference/)** - Explore all available operations\n3. **[Security Configuration](/security/)** - Configure advanced security\n4. **[Examples](/examples/)** - See real-world usage patterns\n\n## Troubleshooting\n\n### Component Not Found\n\n```bash\n# Verify installation\nbazel query @bazel_file_ops_component//...\n\n# Check module configuration\ngrep \"bazel_file_ops_component\" MODULE.bazel\n```\n\n### Operation Failures\n\n```bash\n# Enable debug logging\nexport FILE_OPS_LOG_LEVEL=debug\nbazel test //:your_test --verbose_failures\n```\n\n### Performance Issues\n\n```bash\n# Profile operations\nexport FILE_OPS_PROFILE=true\nbazel test //:large_operation\n```\n\nStill having issues? Check the [troubleshooting guide](/troubleshooting/) or [open an issue](https://github.com/pulseengine/bazel-file-ops-component/issues).","src/content/docs/getting-started/index.mdx","841907af3741018a","getting-started/index.mdx","security",{"id":79,"data":81,"body":84,"filePath":85,"digest":86,"legacyId":87,"deferredRender":33},{"title":82,"description":83},"Security Configuration","Comprehensive security features and configuration for Bazel File Operations Component","import { Code, Tabs, TabItem, Card, CardGrid, Badge } from '@astrojs/starlight/components';\n\n## Security Model\n\nThe Bazel File Operations Component implements a **defense-in-depth** security model with multiple layers of protection:\n\n```mermaid\nflowchart TB\n    A[Bazel Rule] --> B[File Operations Component]\n    B --> C[WebAssembly Sandbox]\n    C --> D[Capability-Based Security]\n    D --> E[Path Validation]\n    E --> F[Preopen Directories]\n    F --> G[Host File System]\n\n    subgraph \"Security Layers\"\n        C\n        D\n        E\n        F\n    end\n```\n\n\u003CCardGrid>\n  \u003CCard title=\"🔒 WebAssembly Sandboxing\" icon=\"shield\">\n    Complete isolation through WASM runtime with no direct system access\n  \u003C/Card>\n  \u003CCard title=\"🛡️ Capability-Based Security\" icon=\"lock-closed\">\n    Only explicitly granted file system capabilities are available\n  \u003C/Card>\n  \u003CCard title=\"🔍 Path Validation\" icon=\"magnifying-glass\">\n    Automatic prevention of path traversal and unauthorized access\n  \u003C/Card>\n  \u003CCard title=\"📁 Preopen Directories\" icon=\"folder-open\">\n    Restricted file access to only specified directory trees\n  \u003C/Card>\n\u003C/CardGrid>\n\n## Security Levels\n\n### High Security \u003CBadge text=\"Recommended for Production\" variant=\"tip\" />\n\nMaximum security with strict isolation and validation.\n\n```python\nfile_ops_action(\n    name = \"secure_operations\",\n    security_level = \"high\",\n    implementation = \"tinygo\",  # Most secure implementation\n    allowed_paths = [\n        \"/tmp/bazel-workspace-safe\",\n        \"/build/output\"\n    ],\n    operations = [...],\n)\n```\n\n**Features:**\n- ✅ Maximum WebAssembly sandboxing\n- ✅ Strict path traversal prevention\n- ✅ Capability validation at every operation\n- ✅ Minimal attack surface\n- ✅ Detailed audit logging\n\n**Use Cases:**\n- Production builds\n- Security-critical applications\n- CI/CD pipelines\n- Multi-tenant environments\n\n### Standard Security \u003CBadge text=\"Default\" variant=\"note\" />\n\nBalanced security and performance for most use cases.\n\n```python\nfile_ops_action(\n    name = \"standard_operations\",\n    security_level = \"standard\",  # Default\n    operations = [...],\n)\n```\n\n**Features:**\n- ✅ WebAssembly sandboxing\n- ✅ Path traversal prevention\n- ✅ Basic capability validation\n- ✅ Good performance\n- ⚠️ Moderate audit logging\n\n**Use Cases:**\n- Development environments\n- Standard build processes\n- Testing workflows\n- General file operations\n\n### Low Security \u003CBadge text=\"Development Only\" variant=\"caution\" />\n\nMinimal security overhead for development and debugging.\n\n```python\nfile_ops_action(\n    name = \"dev_operations\",\n    security_level = \"low\",\n    operations = [...],\n)\n```\n\n**Features:**\n- ✅ Basic WebAssembly sandboxing\n- ⚠️ Relaxed path validation\n- ⚠️ Minimal capability checking\n- ✅ Maximum performance\n- ❌ No audit logging\n\n**Use Cases:**\n- Local development\n- Debugging and troubleshooting\n- Performance testing\n- Prototyping\n\n## Path Security\n\n### Allowed Paths Configuration\n\nRestrict file operations to specific directory trees:\n\n\u003CTabs>\n\u003CTabItem label=\"Explicit Paths\">\n```python\nfile_ops_action(\n    name = \"restricted_ops\",\n    security_level = \"high\",\n    allowed_paths = [\n        \"/tmp/bazel-workspace\",      # Specific directory\n        \"/build/output\",             # Build directory\n        \"/src/templates\",            # Template directory\n    ],\n    operations = [...],\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Pattern-Based\">\n```python\nfile_ops_action(\n    name = \"pattern_ops\",\n    allowed_paths = [\n        \"/tmp/bazel-*\",              # Pattern matching\n        \"/workspace/*/build\",        # Nested patterns\n        \"${BAZEL_WORKSPACE}/*\",      # Environment variables\n    ],\n    operations = [...],\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Path Traversal Prevention\n\nAutomatic protection against common attacks:\n\n```python\n# These operations will be automatically blocked:\noperations = [\n    # ❌ Path traversal attempts\n    {\"operation\": \"copy_file\", \"src\": \"../../../etc/passwd\", \"dest\": \"stolen.txt\"},\n    {\"operation\": \"copy_file\", \"src\": \"safe.txt\", \"dest\": \"../../../../tmp/escape.txt\"},\n\n    # ❌ Symlink attacks\n    {\"operation\": \"copy_file\", \"src\": \"/proc/version\", \"dest\": \"system_info.txt\"},\n\n    # ❌ Unauthorized system paths\n    {\"operation\": \"create_directory\", \"path\": \"/etc/malicious\"},\n\n    # ✅ Safe operations (allowed)\n    {\"operation\": \"copy_file\", \"src\": \"input.txt\", \"dest\": \"workspace/output.txt\"},\n    {\"operation\": \"create_directory\", \"path\": \"workspace/build\"},\n]\n```\n\n### Dynamic Path Validation\n\nRuntime path validation with context awareness:\n\n```python\ndef _secure_build_impl(ctx):\n    \"\"\"Custom rule with dynamic path validation\"\"\"\n\n    # Generate allowed paths based on build context\n    workspace_path = ctx.bin_dir.path + \"/workspace\"\n    output_path = ctx.genfiles_dir.path + \"/output\"\n\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_secure\",\n        security_level = \"high\",\n        allowed_paths = [workspace_path, output_path],\n        operations = [\n            {\"operation\": \"create_directory\", \"path\": workspace_path},\n            {\"operation\": \"copy_file\",\n             \"src\": ctx.file.input.path,\n             \"dest\": workspace_path + \"/input.txt\"},\n        ],\n    )\n```\n\n## Capability-Based Security\n\n### File System Capabilities\n\nThe component uses WASI capabilities to restrict file system access:\n\n```python\n# Capabilities are automatically configured based on operations\nfile_ops_action(\n    name = \"capability_example\",\n    operations = [\n        # Requires: READ capability for source directory\n        # Requires: WRITE capability for destination directory\n        {\"operation\": \"copy_directory\", \"src\": \"input/\", \"dest\": \"output/\"},\n\n        # Requires: WRITE + CREATE capability for directory creation\n        {\"operation\": \"create_directory\", \"path\": \"new_dir\"},\n    ],\n    # Component automatically requests minimal required capabilities\n)\n```\n\n### Capability Validation\n\nReal-time capability checking prevents unauthorized operations:\n\n```mermaid\nflowchart TD\n    A[File Operation Request] --> B{Validate Capability}\n    B -->|Has Capability| C[Check Path Permissions]\n    B -->|No Capability| D[REJECT: Capability Denied]\n    C -->|Path Allowed| E[Execute Operation]\n    C -->|Path Blocked| F[REJECT: Path Unauthorized]\n    E --> G[Log Success]\n    D --> H[Log Security Violation]\n    F --> I[Log Path Violation]\n```\n\n## Implementation Security\n\n### TinyGo Implementation \u003CBadge text=\"Maximum Security\" variant=\"tip\" />\n\nDesigned for maximum security with minimal attack surface:\n\n**Security Features:**\n- Minimal binary size (~2MB) reduces attack vectors\n- No complex dependencies or dynamic linking\n- Optimized memory management with bounds checking\n- Strict type safety and overflow protection\n- Limited system call interface\n\n**Use When:**\n- Security is the top priority\n- Handling sensitive data\n- Multi-tenant or shared environments\n- Compliance requirements\n\n### Rust Implementation \u003CBadge text=\"Performance Focused\" variant=\"note\" />\n\nBalanced security and performance with advanced features:\n\n**Security Features:**\n- Memory safety guarantees from Rust\n- Safe concurrency without data races\n- Strong type system prevents many vulnerability classes\n- Sandboxed execution environment\n- Comprehensive error handling\n\n**Use When:**\n- High-performance requirements\n- Complex file operations\n- Advanced JSON processing needs\n- Large-scale batch operations\n\n## Audit and Monitoring\n\n### Security Event Logging\n\nComprehensive logging of security-relevant events:\n\n```python\nfile_ops_action(\n    name = \"audited_ops\",\n    security_level = \"high\",\n    enable_audit_logging = True,\n    operations = [...],\n)\n```\n\n**Logged Events:**\n- All file operations (with timestamps)\n- Security policy violations\n- Path traversal attempts\n- Capability access requests\n- Performance metrics\n- Error conditions\n\n### Log Format\n\n```json\n{\n  \"timestamp\": \"2024-08-24T10:30:45Z\",\n  \"level\": \"INFO\",\n  \"component\": \"file-ops-tinygo\",\n  \"operation\": \"copy_file\",\n  \"src_path\": \"/workspace/input.txt\",\n  \"dest_path\": \"/output/result.txt\",\n  \"security_level\": \"high\",\n  \"allowed_paths\": [\"/workspace/*\", \"/output/*\"],\n  \"duration_ms\": 45,\n  \"bytes_processed\": 1024,\n  \"result\": \"success\"\n}\n```\n\n### Security Violation Alerts\n\n```json\n{\n  \"timestamp\": \"2024-08-24T10:31:02Z\",\n  \"level\": \"ERROR\",\n  \"component\": \"file-ops-security\",\n  \"violation_type\": \"PATH_TRAVERSAL\",\n  \"attempted_path\": \"../../../../etc/passwd\",\n  \"operation\": \"copy_file\",\n  \"security_level\": \"high\",\n  \"action\": \"BLOCKED\",\n  \"source_rule\": \"//build:suspicious_copy\"\n}\n```\n\n## Advanced Security Configuration\n\n### Environment-Specific Security\n\n\u003CTabs>\n\u003CTabItem label=\"CI/CD Pipeline\">\n```python\n# High security for CI/CD\nfile_ops_action(\n    name = \"ci_operations\",\n    security_level = \"high\",\n    implementation = \"tinygo\",\n    allowed_paths = [\n        \"/tmp/ci-workspace\",\n        \"/artifacts/output\",\n    ],\n    enable_audit_logging = True,\n    max_file_size_mb = 100,  # Prevent DoS attacks\n    max_operations = 1000,   # Rate limiting\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Development\">\n```python\n# Relaxed security for development\nfile_ops_action(\n    name = \"dev_operations\",\n    security_level = \"standard\",\n    allowed_paths = [\n        \"${BAZEL_WORKSPACE}/*\",\n        \"/tmp/dev-*\",\n    ],\n    enable_debug_logging = True,\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Production\">\n```python\n# Maximum security for production\nfile_ops_action(\n    name = \"prod_operations\",\n    security_level = \"high\",\n    implementation = \"tinygo\",\n    allowed_paths = [\n        \"/production/workspace\",\n        \"/production/output\",\n    ],\n    enable_audit_logging = True,\n    enable_integrity_checks = True,\n    max_operation_time_sec = 300,\n)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Custom Security Policies\n\nDefine custom security policies for specific use cases:\n\n```python\ndef _create_security_policy(environment, sensitivity_level):\n    \"\"\"Create security policy based on context\"\"\"\n\n    if environment == \"production\" and sensitivity_level == \"high\":\n        return {\n            \"security_level\": \"high\",\n            \"implementation\": \"tinygo\",\n            \"max_file_size_mb\": 50,\n            \"max_operations\": 500,\n            \"allowed_extensions\": [\".txt\", \".json\", \".cpp\", \".h\"],\n            \"enable_audit_logging\": True,\n            \"enable_integrity_checks\": True,\n        }\n    elif environment == \"development\":\n        return {\n            \"security_level\": \"standard\",\n            \"implementation\": \"auto\",\n            \"enable_debug_logging\": True,\n            \"relaxed_path_validation\": True,\n        }\n    else:\n        return {\"security_level\": \"standard\"}\n\nfile_ops_action(\n    name = \"policy_based_ops\",\n    **_create_security_policy(\"production\", \"high\"),\n    operations = [...],\n)\n```\n\n## Compliance and Standards\n\n### Security Standards Compliance\n\nThe component supports various security standards:\n\n- **NIST Cybersecurity Framework**: Identify, Protect, Detect, Respond, Recover\n- **OWASP Top 10**: Protection against common web application vulnerabilities\n- **ISO 27001**: Information security management system requirements\n- **SOC 2**: Security, availability, and confidentiality controls\n\n### Compliance Configuration\n\n```python\n# SOC 2 compliant configuration\nfile_ops_action(\n    name = \"soc2_compliant_ops\",\n    security_level = \"high\",\n    enable_audit_logging = True,\n    enable_integrity_checks = True,\n    enable_encryption_at_rest = True,  # For sensitive operations\n    access_control_policy = \"strict\",\n    operations = [...],\n)\n\n# PCI DSS compliant configuration (for payment processing)\nfile_ops_action(\n    name = \"pci_compliant_ops\",\n    security_level = \"high\",\n    implementation = \"tinygo\",  # Minimal attack surface\n    allowed_paths = [\"/secure/cardholder-data\"],\n    enable_data_masking = True,\n    require_encryption = True,\n    operations = [...],\n)\n```\n\n## Security Best Practices\n\n### Rule Development\n\n1. **Principle of Least Privilege**: Grant minimal required permissions\n2. **Defense in Depth**: Use multiple security layers\n3. **Fail Securely**: Default to secure settings on errors\n4. **Input Validation**: Validate all file paths and operation parameters\n5. **Audit Everything**: Log security-relevant events\n\n### Deployment\n\n1. **Environment Separation**: Use different security levels per environment\n2. **Regular Updates**: Keep components and dependencies updated\n3. **Security Monitoring**: Monitor logs for security violations\n4. **Incident Response**: Have procedures for security incidents\n5. **Regular Testing**: Test security configurations regularly\n\n### Code Examples\n\n\u003CTabs>\n\u003CTabItem label=\"Secure Rule Development\">\n```python\ndef _secure_file_processor_impl(ctx):\n    \"\"\"Example of secure rule development\"\"\"\n\n    # Validate inputs\n    if not ctx.attr.allowed_paths:\n        fail(\"allowed_paths must be specified for security\")\n\n    # Use high security by default\n    security_level = ctx.attr.security_level or \"high\"\n\n    # Generate minimal required operations\n    operations = []\n    for src in ctx.files.srcs:\n        # Validate file extension\n        if not any(src.basename.endswith(ext) for ext in [\".txt\", \".json\"]):\n            fail(f\"Unsupported file type: {src.basename}\")\n\n        operations.append({\n            \"operation\": \"copy_file\",\n            \"src\": src.path,\n            \"dest\": f\"workspace/{src.basename}\",\n            \"preserve_metadata\": True,\n        })\n\n    file_ops_action(\n        ctx = ctx,\n        name = ctx.attr.name + \"_secure\",\n        operations = operations,\n        security_level = security_level,\n        allowed_paths = ctx.attr.allowed_paths,\n        enable_audit_logging = True,\n    )\n\nsecure_file_processor = rule(\n    implementation = _secure_file_processor_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True, mandatory = True),\n        \"allowed_paths\": attr.string_list(mandatory = True),\n        \"security_level\": attr.string(default = \"high\"),\n    },\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"Security Testing\">\n```python\ndef test_security_violations():\n    \"\"\"Test that security violations are properly blocked\"\"\"\n\n    # Test path traversal prevention\n    file_ops_test(\n        name = \"path_traversal_test\",\n        operations = [\n            {\"operation\": \"copy_file\", \"src\": \"../../../etc/passwd\", \"dest\": \"stolen.txt\"},\n        ],\n        expect_failure = True,\n        expected_error = \"PATH_TRAVERSAL\",\n    )\n\n    # Test unauthorized path access\n    file_ops_test(\n        name = \"unauthorized_path_test\",\n        security_level = \"high\",\n        allowed_paths = [\"/tmp/safe\"],\n        operations = [\n            {\"operation\": \"create_directory\", \"path\": \"/etc/malicious\"},\n        ],\n        expect_failure = True,\n        expected_error = \"UNAUTHORIZED_PATH\",\n    )\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Troubleshooting Security Issues\n\n### Common Security Errors\n\n**Path traversal blocked:**\n```\nERROR: Path traversal detected in operation: ../../../sensitive/file.txt\nSolution: Use absolute paths within allowed directories\n```\n\n**Unauthorized path access:**\n```\nERROR: Path not in allowed list: /unauthorized/path\nSolution: Add path to allowed_paths or use different destination\n```\n\n**Capability denied:**\n```\nERROR: Missing capability for operation: WRITE\nSolution: Ensure operation type matches required capabilities\n```\n\n**Sandbox violation:**\n```\nERROR: WebAssembly sandbox violation: unauthorized system call\nSolution: Review security level and implementation choice\n```\n\n### Security Debugging\n\n```bash\n# Enable security debug logging\nexport FILE_OPS_SECURITY_DEBUG=true\nexport FILE_OPS_LOG_LEVEL=debug\n\n# Run with verbose security logging\nbazel build --verbose_failures //:target\n\n# Check security audit logs\nbazel build //:target 2>&1 | grep \"SECURITY:\"\n```\n\n## Next Steps\n\n- **[API Reference](/api-reference/)** - Detailed security-related API documentation\n- **[Integration Guide](/integration/)** - Secure integration patterns\n- **[Examples](/examples/)** - Security-focused examples\n- **[Troubleshooting](/troubleshooting/)** - Security troubleshooting guide","src/content/docs/security/index.mdx","aa27d614901765fb","security/index.mdx","installation",{"id":88,"data":90,"body":93,"filePath":94,"digest":95,"legacyId":96,"deferredRender":33},{"title":91,"description":92},"Installation","How to add Bazel File Operations Component to your Bazel workspace","import { Code, Tabs, TabItem } from '@astrojs/starlight/components';\n\n## Adding to Your Bazel Workspace\n\nThe Bazel File Operations Component is distributed as a Bazel module. Add it to your `MODULE.bazel` file:\n\n\u003CTabs>\n\u003CTabItem label=\"MODULE.bazel (bzlmod)\">\n```python\n# Add the file operations component dependency\nbazel_dep(name = \"bazel_file_ops_component\", version = \"1.0.0\")\n\n# Git override for latest development version (optional)\ngit_override(\n    module_name = \"bazel_file_ops_component\",\n    remote = \"https://github.com/pulseengine/bazel-file-ops-component.git\",\n    commit = \"main\",  # Use specific commit hash for production\n)\n```\n\u003C/TabItem>\n\u003CTabItem label=\"WORKSPACE (legacy)\">\n```python\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\")\n\n# File Operations Component\ngit_repository(\n    name = \"bazel_file_ops_component\",\n    remote = \"https://github.com/pulseengine/bazel-file-ops-component.git\",\n    branch = \"main\",  # Use tag for production: tag = \"v1.0.0\"\n)\n\n# Load dependencies\nload(\"@bazel_file_ops_component//bazel:repositories.bzl\", \"file_ops_dependencies\")\nfile_ops_dependencies()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n## Prerequisites\n\n### Required Dependencies\n\nYour workspace must include:\n\n- **Bazel 7.0+**: Component model support requires recent Bazel\n- **Platform Support**: The component supports Linux, macOS, and Windows\n\n### Rule Set Integration\n\nThe component works with any Bazel rule set. Common integrations:\n\n```python\n# For WebAssembly component rule sets\nbazel_dep(name = \"rules_wasm_component\", version = \"0.1.0\")\n\n# For Rust integration\nbazel_dep(name = \"rules_rust\", version = \"0.62.0\")\n\n# For Go integration\nbazel_dep(name = \"rules_go\", version = \"0.55.1\")\n\n# For C++ integration\nbazel_dep(name = \"rules_cc\", version = \"0.1.1\")\n```\n\n## Verification\n\nTest your installation with a simple build:\n\n```bash\n# Test basic functionality\nbazel run @bazel_file_ops_component//tools:file_ops_test\n\n# Test component builds (requires WebAssembly toolchain)\nbazel build @bazel_file_ops_component//tinygo:file_ops_component\nbazel build @bazel_file_ops_component//rust:file_ops_component\n```\n\n## Implementation Selection\n\nThe component automatically selects the best implementation:\n\n### TinyGo Implementation\n- **Security-focused**: Maximum WebAssembly sandboxing\n- **Smaller binary**: ~2MB component size\n- **Memory efficient**: Lower memory footprint\n- **Use case**: Security-critical applications\n\n### Rust Implementation\n- **Performance-optimized**: Faster execution\n- **Feature-rich**: Advanced JSON processing, streaming I/O\n- **Larger binary**: ~8MB component size\n- **Use case**: High-throughput file operations\n\n## Configuration\n\n### Basic Configuration\n\nCreate a configuration file for default settings:\n\n```json\n{\n  \"default_implementation\": \"tinygo\",\n  \"security_level\": \"high\",\n  \"allowed_paths\": [\n    \"/tmp/bazel-*\",\n    \"/workspace/*\"\n  ],\n  \"enable_logging\": true,\n  \"log_level\": \"info\"\n}\n```\n\n### Environment Variables\n\n```bash\n# Override default implementation\nexport FILE_OPS_IMPLEMENTATION=rust\n\n# Security configuration\nexport FILE_OPS_SECURITY_LEVEL=high\n\n# Enable debug logging\nexport FILE_OPS_LOG_LEVEL=debug\n```\n\n## Next Steps\n\n- **[Getting Started Guide](/getting-started/)** - Run your first operations\n- **[Integration Examples](/integration/)** - Integrate with your rule set\n- **[Security Configuration](/security/)** - Configure security settings\n- **[API Reference](/api-reference/)** - Detailed API documentation\n\n## Troubleshooting\n\n### Common Issues\n\n**Module not found errors:**\n```bash\n# Ensure proper module name in MODULE.bazel\nbazel_dep(name = \"bazel_file_ops_component\", version = \"1.0.0\")\n```\n\n**WebAssembly toolchain errors:**\n```bash\n# Ensure WebAssembly toolchain is available\nbazel query @rules_wasm_component//...\n```\n\n**Platform compatibility:**\n- Windows: Requires Bazel 7.0+ with proper MSYS2 setup\n- macOS: No additional requirements\n- Linux: glibc 2.17+ recommended\n\nSee the [full troubleshooting guide](/troubleshooting/) for more details.","src/content/docs/installation/index.mdx","f78f9dcb7155b34c","installation/index.mdx"]